// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package axi_rt_reg_pkg;

  // Param list
  parameter int NumMrg = 2;
  parameter int NumSub = 2;
  parameter int NumReg = 4;

  // Address widths within the block
  parameter int BlockAw = 9;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [31:0] q;
  } axi_rt_reg2hw_major_version_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_rt_reg2hw_minor_version_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_rt_reg2hw_patch_version_reg_t;

  typedef struct packed {
    logic        q;
  } axi_rt_reg2hw_rt_enable_mreg_t;

  typedef struct packed {
    logic [7:0]  q;
  } axi_rt_reg2hw_len_limit_mreg_t;

  typedef struct packed {
    logic        q;
  } axi_rt_reg2hw_imtu_enable_mreg_t;

  typedef struct packed {
    logic        q;
  } axi_rt_reg2hw_imtu_abort_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_rt_reg2hw_start_addr_sub_low_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_rt_reg2hw_start_addr_sub_high_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_rt_reg2hw_end_addr_sub_low_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_rt_reg2hw_end_addr_sub_high_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_rt_reg2hw_write_budget_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_rt_reg2hw_read_budget_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_rt_reg2hw_write_period_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_rt_reg2hw_read_period_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } axi_rt_reg2hw_max_num_managers_reg_t;

  typedef struct packed {
    logic        d;
  } axi_rt_hw2reg_rt_bypassed_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_write_budget_left_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_read_budget_left_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_write_period_left_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_read_period_left_mreg_t;

  typedef struct packed {
    logic        d;
  } axi_rt_hw2reg_isolate_mreg_t;

  typedef struct packed {
    logic        d;
  } axi_rt_hw2reg_isolated_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_num_managers_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_addr_width_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_data_width_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_id_width_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_user_width_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_num_pending_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_w_buffer_depth_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_num_addr_regions_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_period_width_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } axi_rt_hw2reg_budget_width_reg_t;

  // Register -> HW type
  typedef struct packed {
    axi_rt_reg2hw_major_version_reg_t major_version; // [1173:1142]
    axi_rt_reg2hw_minor_version_reg_t minor_version; // [1141:1110]
    axi_rt_reg2hw_patch_version_reg_t patch_version; // [1109:1078]
    axi_rt_reg2hw_rt_enable_mreg_t [1:0] rt_enable; // [1077:1076]
    axi_rt_reg2hw_len_limit_mreg_t [1:0] len_limit; // [1075:1060]
    axi_rt_reg2hw_imtu_enable_mreg_t [1:0] imtu_enable; // [1059:1058]
    axi_rt_reg2hw_imtu_abort_mreg_t [1:0] imtu_abort; // [1057:1056]
    axi_rt_reg2hw_start_addr_sub_low_mreg_t [3:0] start_addr_sub_low; // [1055:928]
    axi_rt_reg2hw_start_addr_sub_high_mreg_t [3:0] start_addr_sub_high; // [927:800]
    axi_rt_reg2hw_end_addr_sub_low_mreg_t [3:0] end_addr_sub_low; // [799:672]
    axi_rt_reg2hw_end_addr_sub_high_mreg_t [3:0] end_addr_sub_high; // [671:544]
    axi_rt_reg2hw_write_budget_mreg_t [3:0] write_budget; // [543:416]
    axi_rt_reg2hw_read_budget_mreg_t [3:0] read_budget; // [415:288]
    axi_rt_reg2hw_write_period_mreg_t [3:0] write_period; // [287:160]
    axi_rt_reg2hw_read_period_mreg_t [3:0] read_period; // [159:32]
    axi_rt_reg2hw_max_num_managers_reg_t max_num_managers; // [31:0]
  } axi_rt_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    axi_rt_hw2reg_rt_bypassed_mreg_t [1:0] rt_bypassed; // [837:836]
    axi_rt_hw2reg_write_budget_left_mreg_t [3:0] write_budget_left; // [835:708]
    axi_rt_hw2reg_read_budget_left_mreg_t [3:0] read_budget_left; // [707:580]
    axi_rt_hw2reg_write_period_left_mreg_t [3:0] write_period_left; // [579:452]
    axi_rt_hw2reg_read_period_left_mreg_t [3:0] read_period_left; // [451:324]
    axi_rt_hw2reg_isolate_mreg_t [1:0] isolate; // [323:322]
    axi_rt_hw2reg_isolated_mreg_t [1:0] isolated; // [321:320]
    axi_rt_hw2reg_num_managers_reg_t num_managers; // [319:288]
    axi_rt_hw2reg_addr_width_reg_t addr_width; // [287:256]
    axi_rt_hw2reg_data_width_reg_t data_width; // [255:224]
    axi_rt_hw2reg_id_width_reg_t id_width; // [223:192]
    axi_rt_hw2reg_user_width_reg_t user_width; // [191:160]
    axi_rt_hw2reg_num_pending_reg_t num_pending; // [159:128]
    axi_rt_hw2reg_w_buffer_depth_reg_t w_buffer_depth; // [127:96]
    axi_rt_hw2reg_num_addr_regions_reg_t num_addr_regions; // [95:64]
    axi_rt_hw2reg_period_width_reg_t period_width; // [63:32]
    axi_rt_hw2reg_budget_width_reg_t budget_width; // [31:0]
  } axi_rt_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] AXI_RT_MAJOR_VERSION_OFFSET = 9'h 0;
  parameter logic [BlockAw-1:0] AXI_RT_MINOR_VERSION_OFFSET = 9'h 4;
  parameter logic [BlockAw-1:0] AXI_RT_PATCH_VERSION_OFFSET = 9'h 8;
  parameter logic [BlockAw-1:0] AXI_RT_RT_ENABLE_OFFSET = 9'h c;
  parameter logic [BlockAw-1:0] AXI_RT_RT_BYPASSED_OFFSET = 9'h 10;
  parameter logic [BlockAw-1:0] AXI_RT_LEN_LIMIT_OFFSET = 9'h 14;
  parameter logic [BlockAw-1:0] AXI_RT_IMTU_ENABLE_OFFSET = 9'h 18;
  parameter logic [BlockAw-1:0] AXI_RT_IMTU_ABORT_OFFSET = 9'h 1c;
  parameter logic [BlockAw-1:0] AXI_RT_START_ADDR_SUB_LOW_0_OFFSET = 9'h 20;
  parameter logic [BlockAw-1:0] AXI_RT_START_ADDR_SUB_LOW_1_OFFSET = 9'h 24;
  parameter logic [BlockAw-1:0] AXI_RT_START_ADDR_SUB_LOW_2_OFFSET = 9'h 28;
  parameter logic [BlockAw-1:0] AXI_RT_START_ADDR_SUB_LOW_3_OFFSET = 9'h 2c;
  parameter logic [BlockAw-1:0] AXI_RT_START_ADDR_SUB_HIGH_0_OFFSET = 9'h 30;
  parameter logic [BlockAw-1:0] AXI_RT_START_ADDR_SUB_HIGH_1_OFFSET = 9'h 34;
  parameter logic [BlockAw-1:0] AXI_RT_START_ADDR_SUB_HIGH_2_OFFSET = 9'h 38;
  parameter logic [BlockAw-1:0] AXI_RT_START_ADDR_SUB_HIGH_3_OFFSET = 9'h 3c;
  parameter logic [BlockAw-1:0] AXI_RT_END_ADDR_SUB_LOW_0_OFFSET = 9'h 40;
  parameter logic [BlockAw-1:0] AXI_RT_END_ADDR_SUB_LOW_1_OFFSET = 9'h 44;
  parameter logic [BlockAw-1:0] AXI_RT_END_ADDR_SUB_LOW_2_OFFSET = 9'h 48;
  parameter logic [BlockAw-1:0] AXI_RT_END_ADDR_SUB_LOW_3_OFFSET = 9'h 4c;
  parameter logic [BlockAw-1:0] AXI_RT_END_ADDR_SUB_HIGH_0_OFFSET = 9'h 50;
  parameter logic [BlockAw-1:0] AXI_RT_END_ADDR_SUB_HIGH_1_OFFSET = 9'h 54;
  parameter logic [BlockAw-1:0] AXI_RT_END_ADDR_SUB_HIGH_2_OFFSET = 9'h 58;
  parameter logic [BlockAw-1:0] AXI_RT_END_ADDR_SUB_HIGH_3_OFFSET = 9'h 5c;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_BUDGET_0_OFFSET = 9'h 60;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_BUDGET_1_OFFSET = 9'h 64;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_BUDGET_2_OFFSET = 9'h 68;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_BUDGET_3_OFFSET = 9'h 6c;
  parameter logic [BlockAw-1:0] AXI_RT_READ_BUDGET_0_OFFSET = 9'h 70;
  parameter logic [BlockAw-1:0] AXI_RT_READ_BUDGET_1_OFFSET = 9'h 74;
  parameter logic [BlockAw-1:0] AXI_RT_READ_BUDGET_2_OFFSET = 9'h 78;
  parameter logic [BlockAw-1:0] AXI_RT_READ_BUDGET_3_OFFSET = 9'h 7c;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_PERIOD_0_OFFSET = 9'h 80;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_PERIOD_1_OFFSET = 9'h 84;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_PERIOD_2_OFFSET = 9'h 88;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_PERIOD_3_OFFSET = 9'h 8c;
  parameter logic [BlockAw-1:0] AXI_RT_READ_PERIOD_0_OFFSET = 9'h 90;
  parameter logic [BlockAw-1:0] AXI_RT_READ_PERIOD_1_OFFSET = 9'h 94;
  parameter logic [BlockAw-1:0] AXI_RT_READ_PERIOD_2_OFFSET = 9'h 98;
  parameter logic [BlockAw-1:0] AXI_RT_READ_PERIOD_3_OFFSET = 9'h 9c;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_BUDGET_LEFT_0_OFFSET = 9'h a0;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_BUDGET_LEFT_1_OFFSET = 9'h a4;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_BUDGET_LEFT_2_OFFSET = 9'h a8;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_BUDGET_LEFT_3_OFFSET = 9'h ac;
  parameter logic [BlockAw-1:0] AXI_RT_READ_BUDGET_LEFT_0_OFFSET = 9'h b0;
  parameter logic [BlockAw-1:0] AXI_RT_READ_BUDGET_LEFT_1_OFFSET = 9'h b4;
  parameter logic [BlockAw-1:0] AXI_RT_READ_BUDGET_LEFT_2_OFFSET = 9'h b8;
  parameter logic [BlockAw-1:0] AXI_RT_READ_BUDGET_LEFT_3_OFFSET = 9'h bc;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_PERIOD_LEFT_0_OFFSET = 9'h c0;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_PERIOD_LEFT_1_OFFSET = 9'h c4;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_PERIOD_LEFT_2_OFFSET = 9'h c8;
  parameter logic [BlockAw-1:0] AXI_RT_WRITE_PERIOD_LEFT_3_OFFSET = 9'h cc;
  parameter logic [BlockAw-1:0] AXI_RT_READ_PERIOD_LEFT_0_OFFSET = 9'h d0;
  parameter logic [BlockAw-1:0] AXI_RT_READ_PERIOD_LEFT_1_OFFSET = 9'h d4;
  parameter logic [BlockAw-1:0] AXI_RT_READ_PERIOD_LEFT_2_OFFSET = 9'h d8;
  parameter logic [BlockAw-1:0] AXI_RT_READ_PERIOD_LEFT_3_OFFSET = 9'h dc;
  parameter logic [BlockAw-1:0] AXI_RT_ISOLATE_OFFSET = 9'h e0;
  parameter logic [BlockAw-1:0] AXI_RT_ISOLATED_OFFSET = 9'h e4;
  parameter logic [BlockAw-1:0] AXI_RT_NUM_MANAGERS_OFFSET = 9'h e8;
  parameter logic [BlockAw-1:0] AXI_RT_ADDR_WIDTH_OFFSET = 9'h ec;
  parameter logic [BlockAw-1:0] AXI_RT_DATA_WIDTH_OFFSET = 9'h f0;
  parameter logic [BlockAw-1:0] AXI_RT_ID_WIDTH_OFFSET = 9'h f4;
  parameter logic [BlockAw-1:0] AXI_RT_USER_WIDTH_OFFSET = 9'h f8;
  parameter logic [BlockAw-1:0] AXI_RT_NUM_PENDING_OFFSET = 9'h fc;
  parameter logic [BlockAw-1:0] AXI_RT_W_BUFFER_DEPTH_OFFSET = 9'h 100;
  parameter logic [BlockAw-1:0] AXI_RT_NUM_ADDR_REGIONS_OFFSET = 9'h 104;
  parameter logic [BlockAw-1:0] AXI_RT_PERIOD_WIDTH_OFFSET = 9'h 108;
  parameter logic [BlockAw-1:0] AXI_RT_BUDGET_WIDTH_OFFSET = 9'h 10c;
  parameter logic [BlockAw-1:0] AXI_RT_MAX_NUM_MANAGERS_OFFSET = 9'h 110;

  // Reset values for hwext registers and their fields
  parameter logic [1:0] AXI_RT_RT_BYPASSED_RESVAL = 2'h 0;
  parameter logic [31:0] AXI_RT_WRITE_BUDGET_LEFT_0_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_BUDGET_LEFT_0_WRITE_BUDGET_LEFT_0_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_BUDGET_LEFT_1_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_BUDGET_LEFT_1_WRITE_BUDGET_LEFT_1_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_BUDGET_LEFT_2_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_BUDGET_LEFT_2_WRITE_BUDGET_LEFT_2_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_BUDGET_LEFT_3_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_BUDGET_LEFT_3_WRITE_BUDGET_LEFT_3_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_BUDGET_LEFT_0_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_BUDGET_LEFT_0_READ_BUDGET_LEFT_0_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_BUDGET_LEFT_1_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_BUDGET_LEFT_1_READ_BUDGET_LEFT_1_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_BUDGET_LEFT_2_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_BUDGET_LEFT_2_READ_BUDGET_LEFT_2_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_BUDGET_LEFT_3_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_BUDGET_LEFT_3_READ_BUDGET_LEFT_3_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_PERIOD_LEFT_0_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_PERIOD_LEFT_0_WRITE_PERIOD_LEFT_0_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_PERIOD_LEFT_1_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_PERIOD_LEFT_1_WRITE_PERIOD_LEFT_1_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_PERIOD_LEFT_2_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_PERIOD_LEFT_2_WRITE_PERIOD_LEFT_2_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_PERIOD_LEFT_3_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_WRITE_PERIOD_LEFT_3_WRITE_PERIOD_LEFT_3_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_PERIOD_LEFT_0_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_PERIOD_LEFT_0_READ_PERIOD_LEFT_0_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_PERIOD_LEFT_1_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_PERIOD_LEFT_1_READ_PERIOD_LEFT_1_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_PERIOD_LEFT_2_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_PERIOD_LEFT_2_READ_PERIOD_LEFT_2_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_PERIOD_LEFT_3_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_READ_PERIOD_LEFT_3_READ_PERIOD_LEFT_3_RESVAL = 32'h 0;
  parameter logic [1:0] AXI_RT_ISOLATE_RESVAL = 2'h 0;
  parameter logic [1:0] AXI_RT_ISOLATED_RESVAL = 2'h 0;
  parameter logic [31:0] AXI_RT_NUM_MANAGERS_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_ADDR_WIDTH_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_DATA_WIDTH_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_ID_WIDTH_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_USER_WIDTH_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_NUM_PENDING_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_W_BUFFER_DEPTH_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_NUM_ADDR_REGIONS_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_PERIOD_WIDTH_RESVAL = 32'h 0;
  parameter logic [31:0] AXI_RT_BUDGET_WIDTH_RESVAL = 32'h 0;

  // Register index
  typedef enum int {
    AXI_RT_MAJOR_VERSION,
    AXI_RT_MINOR_VERSION,
    AXI_RT_PATCH_VERSION,
    AXI_RT_RT_ENABLE,
    AXI_RT_RT_BYPASSED,
    AXI_RT_LEN_LIMIT,
    AXI_RT_IMTU_ENABLE,
    AXI_RT_IMTU_ABORT,
    AXI_RT_START_ADDR_SUB_LOW_0,
    AXI_RT_START_ADDR_SUB_LOW_1,
    AXI_RT_START_ADDR_SUB_LOW_2,
    AXI_RT_START_ADDR_SUB_LOW_3,
    AXI_RT_START_ADDR_SUB_HIGH_0,
    AXI_RT_START_ADDR_SUB_HIGH_1,
    AXI_RT_START_ADDR_SUB_HIGH_2,
    AXI_RT_START_ADDR_SUB_HIGH_3,
    AXI_RT_END_ADDR_SUB_LOW_0,
    AXI_RT_END_ADDR_SUB_LOW_1,
    AXI_RT_END_ADDR_SUB_LOW_2,
    AXI_RT_END_ADDR_SUB_LOW_3,
    AXI_RT_END_ADDR_SUB_HIGH_0,
    AXI_RT_END_ADDR_SUB_HIGH_1,
    AXI_RT_END_ADDR_SUB_HIGH_2,
    AXI_RT_END_ADDR_SUB_HIGH_3,
    AXI_RT_WRITE_BUDGET_0,
    AXI_RT_WRITE_BUDGET_1,
    AXI_RT_WRITE_BUDGET_2,
    AXI_RT_WRITE_BUDGET_3,
    AXI_RT_READ_BUDGET_0,
    AXI_RT_READ_BUDGET_1,
    AXI_RT_READ_BUDGET_2,
    AXI_RT_READ_BUDGET_3,
    AXI_RT_WRITE_PERIOD_0,
    AXI_RT_WRITE_PERIOD_1,
    AXI_RT_WRITE_PERIOD_2,
    AXI_RT_WRITE_PERIOD_3,
    AXI_RT_READ_PERIOD_0,
    AXI_RT_READ_PERIOD_1,
    AXI_RT_READ_PERIOD_2,
    AXI_RT_READ_PERIOD_3,
    AXI_RT_WRITE_BUDGET_LEFT_0,
    AXI_RT_WRITE_BUDGET_LEFT_1,
    AXI_RT_WRITE_BUDGET_LEFT_2,
    AXI_RT_WRITE_BUDGET_LEFT_3,
    AXI_RT_READ_BUDGET_LEFT_0,
    AXI_RT_READ_BUDGET_LEFT_1,
    AXI_RT_READ_BUDGET_LEFT_2,
    AXI_RT_READ_BUDGET_LEFT_3,
    AXI_RT_WRITE_PERIOD_LEFT_0,
    AXI_RT_WRITE_PERIOD_LEFT_1,
    AXI_RT_WRITE_PERIOD_LEFT_2,
    AXI_RT_WRITE_PERIOD_LEFT_3,
    AXI_RT_READ_PERIOD_LEFT_0,
    AXI_RT_READ_PERIOD_LEFT_1,
    AXI_RT_READ_PERIOD_LEFT_2,
    AXI_RT_READ_PERIOD_LEFT_3,
    AXI_RT_ISOLATE,
    AXI_RT_ISOLATED,
    AXI_RT_NUM_MANAGERS,
    AXI_RT_ADDR_WIDTH,
    AXI_RT_DATA_WIDTH,
    AXI_RT_ID_WIDTH,
    AXI_RT_USER_WIDTH,
    AXI_RT_NUM_PENDING,
    AXI_RT_W_BUFFER_DEPTH,
    AXI_RT_NUM_ADDR_REGIONS,
    AXI_RT_PERIOD_WIDTH,
    AXI_RT_BUDGET_WIDTH,
    AXI_RT_MAX_NUM_MANAGERS
  } axi_rt_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] AXI_RT_PERMIT [69] = '{
    4'b 1111, // index[ 0] AXI_RT_MAJOR_VERSION
    4'b 1111, // index[ 1] AXI_RT_MINOR_VERSION
    4'b 1111, // index[ 2] AXI_RT_PATCH_VERSION
    4'b 0001, // index[ 3] AXI_RT_RT_ENABLE
    4'b 0001, // index[ 4] AXI_RT_RT_BYPASSED
    4'b 0011, // index[ 5] AXI_RT_LEN_LIMIT
    4'b 0001, // index[ 6] AXI_RT_IMTU_ENABLE
    4'b 0001, // index[ 7] AXI_RT_IMTU_ABORT
    4'b 1111, // index[ 8] AXI_RT_START_ADDR_SUB_LOW_0
    4'b 1111, // index[ 9] AXI_RT_START_ADDR_SUB_LOW_1
    4'b 1111, // index[10] AXI_RT_START_ADDR_SUB_LOW_2
    4'b 1111, // index[11] AXI_RT_START_ADDR_SUB_LOW_3
    4'b 1111, // index[12] AXI_RT_START_ADDR_SUB_HIGH_0
    4'b 1111, // index[13] AXI_RT_START_ADDR_SUB_HIGH_1
    4'b 1111, // index[14] AXI_RT_START_ADDR_SUB_HIGH_2
    4'b 1111, // index[15] AXI_RT_START_ADDR_SUB_HIGH_3
    4'b 1111, // index[16] AXI_RT_END_ADDR_SUB_LOW_0
    4'b 1111, // index[17] AXI_RT_END_ADDR_SUB_LOW_1
    4'b 1111, // index[18] AXI_RT_END_ADDR_SUB_LOW_2
    4'b 1111, // index[19] AXI_RT_END_ADDR_SUB_LOW_3
    4'b 1111, // index[20] AXI_RT_END_ADDR_SUB_HIGH_0
    4'b 1111, // index[21] AXI_RT_END_ADDR_SUB_HIGH_1
    4'b 1111, // index[22] AXI_RT_END_ADDR_SUB_HIGH_2
    4'b 1111, // index[23] AXI_RT_END_ADDR_SUB_HIGH_3
    4'b 1111, // index[24] AXI_RT_WRITE_BUDGET_0
    4'b 1111, // index[25] AXI_RT_WRITE_BUDGET_1
    4'b 1111, // index[26] AXI_RT_WRITE_BUDGET_2
    4'b 1111, // index[27] AXI_RT_WRITE_BUDGET_3
    4'b 1111, // index[28] AXI_RT_READ_BUDGET_0
    4'b 1111, // index[29] AXI_RT_READ_BUDGET_1
    4'b 1111, // index[30] AXI_RT_READ_BUDGET_2
    4'b 1111, // index[31] AXI_RT_READ_BUDGET_3
    4'b 1111, // index[32] AXI_RT_WRITE_PERIOD_0
    4'b 1111, // index[33] AXI_RT_WRITE_PERIOD_1
    4'b 1111, // index[34] AXI_RT_WRITE_PERIOD_2
    4'b 1111, // index[35] AXI_RT_WRITE_PERIOD_3
    4'b 1111, // index[36] AXI_RT_READ_PERIOD_0
    4'b 1111, // index[37] AXI_RT_READ_PERIOD_1
    4'b 1111, // index[38] AXI_RT_READ_PERIOD_2
    4'b 1111, // index[39] AXI_RT_READ_PERIOD_3
    4'b 1111, // index[40] AXI_RT_WRITE_BUDGET_LEFT_0
    4'b 1111, // index[41] AXI_RT_WRITE_BUDGET_LEFT_1
    4'b 1111, // index[42] AXI_RT_WRITE_BUDGET_LEFT_2
    4'b 1111, // index[43] AXI_RT_WRITE_BUDGET_LEFT_3
    4'b 1111, // index[44] AXI_RT_READ_BUDGET_LEFT_0
    4'b 1111, // index[45] AXI_RT_READ_BUDGET_LEFT_1
    4'b 1111, // index[46] AXI_RT_READ_BUDGET_LEFT_2
    4'b 1111, // index[47] AXI_RT_READ_BUDGET_LEFT_3
    4'b 1111, // index[48] AXI_RT_WRITE_PERIOD_LEFT_0
    4'b 1111, // index[49] AXI_RT_WRITE_PERIOD_LEFT_1
    4'b 1111, // index[50] AXI_RT_WRITE_PERIOD_LEFT_2
    4'b 1111, // index[51] AXI_RT_WRITE_PERIOD_LEFT_3
    4'b 1111, // index[52] AXI_RT_READ_PERIOD_LEFT_0
    4'b 1111, // index[53] AXI_RT_READ_PERIOD_LEFT_1
    4'b 1111, // index[54] AXI_RT_READ_PERIOD_LEFT_2
    4'b 1111, // index[55] AXI_RT_READ_PERIOD_LEFT_3
    4'b 0001, // index[56] AXI_RT_ISOLATE
    4'b 0001, // index[57] AXI_RT_ISOLATED
    4'b 1111, // index[58] AXI_RT_NUM_MANAGERS
    4'b 1111, // index[59] AXI_RT_ADDR_WIDTH
    4'b 1111, // index[60] AXI_RT_DATA_WIDTH
    4'b 1111, // index[61] AXI_RT_ID_WIDTH
    4'b 1111, // index[62] AXI_RT_USER_WIDTH
    4'b 1111, // index[63] AXI_RT_NUM_PENDING
    4'b 1111, // index[64] AXI_RT_W_BUFFER_DEPTH
    4'b 1111, // index[65] AXI_RT_NUM_ADDR_REGIONS
    4'b 1111, // index[66] AXI_RT_PERIOD_WIDTH
    4'b 1111, // index[67] AXI_RT_BUDGET_WIDTH
    4'b 1111  // index[68] AXI_RT_MAX_NUM_MANAGERS
  };

endpackage

