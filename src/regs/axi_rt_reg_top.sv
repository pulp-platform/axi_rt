// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module axi_rt_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 9
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output axi_rt_reg_pkg::axi_rt_reg2hw_t reg2hw, // Write
  input  axi_rt_reg_pkg::axi_rt_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import axi_rt_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] major_version_qs;
  logic [31:0] minor_version_qs;
  logic [31:0] patch_version_qs;
  logic rt_enable_enable_0_wd;
  logic rt_enable_enable_0_we;
  logic rt_enable_enable_1_wd;
  logic rt_enable_enable_1_we;
  logic rt_bypassed_bypassed_0_qs;
  logic rt_bypassed_bypassed_0_re;
  logic rt_bypassed_bypassed_1_qs;
  logic rt_bypassed_bypassed_1_re;
  logic [7:0] len_limit_len_0_wd;
  logic len_limit_len_0_we;
  logic [7:0] len_limit_len_1_wd;
  logic len_limit_len_1_we;
  logic imtu_enable_enable_0_wd;
  logic imtu_enable_enable_0_we;
  logic imtu_enable_enable_1_wd;
  logic imtu_enable_enable_1_we;
  logic imtu_abort_abort_0_wd;
  logic imtu_abort_abort_0_we;
  logic imtu_abort_abort_1_wd;
  logic imtu_abort_abort_1_we;
  logic [31:0] start_addr_sub_low_0_wd;
  logic start_addr_sub_low_0_we;
  logic [31:0] start_addr_sub_low_1_wd;
  logic start_addr_sub_low_1_we;
  logic [31:0] start_addr_sub_low_2_wd;
  logic start_addr_sub_low_2_we;
  logic [31:0] start_addr_sub_low_3_wd;
  logic start_addr_sub_low_3_we;
  logic [31:0] start_addr_sub_high_0_wd;
  logic start_addr_sub_high_0_we;
  logic [31:0] start_addr_sub_high_1_wd;
  logic start_addr_sub_high_1_we;
  logic [31:0] start_addr_sub_high_2_wd;
  logic start_addr_sub_high_2_we;
  logic [31:0] start_addr_sub_high_3_wd;
  logic start_addr_sub_high_3_we;
  logic [31:0] end_addr_sub_low_0_wd;
  logic end_addr_sub_low_0_we;
  logic [31:0] end_addr_sub_low_1_wd;
  logic end_addr_sub_low_1_we;
  logic [31:0] end_addr_sub_low_2_wd;
  logic end_addr_sub_low_2_we;
  logic [31:0] end_addr_sub_low_3_wd;
  logic end_addr_sub_low_3_we;
  logic [31:0] end_addr_sub_high_0_wd;
  logic end_addr_sub_high_0_we;
  logic [31:0] end_addr_sub_high_1_wd;
  logic end_addr_sub_high_1_we;
  logic [31:0] end_addr_sub_high_2_wd;
  logic end_addr_sub_high_2_we;
  logic [31:0] end_addr_sub_high_3_wd;
  logic end_addr_sub_high_3_we;
  logic [31:0] write_budget_0_wd;
  logic write_budget_0_we;
  logic [31:0] write_budget_1_wd;
  logic write_budget_1_we;
  logic [31:0] write_budget_2_wd;
  logic write_budget_2_we;
  logic [31:0] write_budget_3_wd;
  logic write_budget_3_we;
  logic [31:0] read_budget_0_wd;
  logic read_budget_0_we;
  logic [31:0] read_budget_1_wd;
  logic read_budget_1_we;
  logic [31:0] read_budget_2_wd;
  logic read_budget_2_we;
  logic [31:0] read_budget_3_wd;
  logic read_budget_3_we;
  logic [31:0] write_period_0_wd;
  logic write_period_0_we;
  logic [31:0] write_period_1_wd;
  logic write_period_1_we;
  logic [31:0] write_period_2_wd;
  logic write_period_2_we;
  logic [31:0] write_period_3_wd;
  logic write_period_3_we;
  logic [31:0] read_period_0_wd;
  logic read_period_0_we;
  logic [31:0] read_period_1_wd;
  logic read_period_1_we;
  logic [31:0] read_period_2_wd;
  logic read_period_2_we;
  logic [31:0] read_period_3_wd;
  logic read_period_3_we;
  logic [31:0] write_budget_left_0_qs;
  logic write_budget_left_0_re;
  logic [31:0] write_budget_left_1_qs;
  logic write_budget_left_1_re;
  logic [31:0] write_budget_left_2_qs;
  logic write_budget_left_2_re;
  logic [31:0] write_budget_left_3_qs;
  logic write_budget_left_3_re;
  logic [31:0] read_budget_left_0_qs;
  logic read_budget_left_0_re;
  logic [31:0] read_budget_left_1_qs;
  logic read_budget_left_1_re;
  logic [31:0] read_budget_left_2_qs;
  logic read_budget_left_2_re;
  logic [31:0] read_budget_left_3_qs;
  logic read_budget_left_3_re;
  logic [31:0] write_period_left_0_qs;
  logic write_period_left_0_re;
  logic [31:0] write_period_left_1_qs;
  logic write_period_left_1_re;
  logic [31:0] write_period_left_2_qs;
  logic write_period_left_2_re;
  logic [31:0] write_period_left_3_qs;
  logic write_period_left_3_re;
  logic [31:0] read_period_left_0_qs;
  logic read_period_left_0_re;
  logic [31:0] read_period_left_1_qs;
  logic read_period_left_1_re;
  logic [31:0] read_period_left_2_qs;
  logic read_period_left_2_re;
  logic [31:0] read_period_left_3_qs;
  logic read_period_left_3_re;
  logic isolate_isolate_0_qs;
  logic isolate_isolate_0_re;
  logic isolate_isolate_1_qs;
  logic isolate_isolate_1_re;
  logic isolated_isolated_0_qs;
  logic isolated_isolated_0_re;
  logic isolated_isolated_1_qs;
  logic isolated_isolated_1_re;
  logic [31:0] num_managers_qs;
  logic num_managers_re;
  logic [31:0] addr_width_qs;
  logic addr_width_re;
  logic [31:0] data_width_qs;
  logic data_width_re;
  logic [31:0] id_width_qs;
  logic id_width_re;
  logic [31:0] user_width_qs;
  logic user_width_re;
  logic [31:0] num_pending_qs;
  logic num_pending_re;
  logic [31:0] w_buffer_depth_qs;
  logic w_buffer_depth_re;
  logic [31:0] num_addr_regions_qs;
  logic num_addr_regions_re;
  logic [31:0] period_width_qs;
  logic period_width_re;
  logic [31:0] budget_width_qs;
  logic budget_width_re;
  logic [31:0] max_num_managers_qs;

  // Register instances
  // R[major_version]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_major_version (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.major_version.q ),

    // to register interface (read)
    .qs     (major_version_qs)
  );


  // R[minor_version]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_minor_version (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.minor_version.q ),

    // to register interface (read)
    .qs     (minor_version_qs)
  );


  // R[patch_version]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_patch_version (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.patch_version.q ),

    // to register interface (read)
    .qs     (patch_version_qs)
  );



  // Subregister 0 of Multireg rt_enable
  // R[rt_enable]: V(False)

  // F[enable_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_rt_enable_enable_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_enable_enable_0_we),
    .wd     (rt_enable_enable_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_enable[0].q ),

    .qs     ()
  );


  // F[enable_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_rt_enable_enable_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_enable_enable_1_we),
    .wd     (rt_enable_enable_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_enable[1].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg rt_bypassed
  // R[rt_bypassed]: V(True)

  // F[bypassed_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_rt_bypassed_bypassed_0 (
    .re     (rt_bypassed_bypassed_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rt_bypassed[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (rt_bypassed_bypassed_0_qs)
  );


  // F[bypassed_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_rt_bypassed_bypassed_1 (
    .re     (rt_bypassed_bypassed_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rt_bypassed[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (rt_bypassed_bypassed_1_qs)
  );




  // Subregister 0 of Multireg len_limit
  // R[len_limit]: V(False)

  // F[len_0]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_len_limit_len_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (len_limit_len_0_we),
    .wd     (len_limit_len_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.len_limit[0].q ),

    .qs     ()
  );


  // F[len_1]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_len_limit_len_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (len_limit_len_1_we),
    .wd     (len_limit_len_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.len_limit[1].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg imtu_enable
  // R[imtu_enable]: V(False)

  // F[enable_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_enable_enable_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_enable_enable_0_we),
    .wd     (imtu_enable_enable_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_enable[0].q ),

    .qs     ()
  );


  // F[enable_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_enable_enable_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_enable_enable_1_we),
    .wd     (imtu_enable_enable_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_enable[1].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg imtu_abort
  // R[imtu_abort]: V(False)

  // F[abort_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_abort_abort_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_abort_abort_0_we),
    .wd     (imtu_abort_abort_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_abort[0].q ),

    .qs     ()
  );


  // F[abort_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_abort_abort_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_abort_abort_1_we),
    .wd     (imtu_abort_abort_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_abort[1].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_0_we),
    .wd     (start_addr_sub_low_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_1_we),
    .wd     (start_addr_sub_low_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_2_we),
    .wd     (start_addr_sub_low_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_3_we),
    .wd     (start_addr_sub_low_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[3].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_0_we),
    .wd     (start_addr_sub_high_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_1_we),
    .wd     (start_addr_sub_high_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_2_we),
    .wd     (start_addr_sub_high_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_3_we),
    .wd     (start_addr_sub_high_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[3].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_0_we),
    .wd     (end_addr_sub_low_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_1_we),
    .wd     (end_addr_sub_low_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_2_we),
    .wd     (end_addr_sub_low_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_3_we),
    .wd     (end_addr_sub_low_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[3].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_0_we),
    .wd     (end_addr_sub_high_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_1_we),
    .wd     (end_addr_sub_high_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_2_we),
    .wd     (end_addr_sub_high_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_3_we),
    .wd     (end_addr_sub_high_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[3].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg write_budget
  // R[write_budget_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_0_we),
    .wd     (write_budget_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg write_budget
  // R[write_budget_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_1_we),
    .wd     (write_budget_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg write_budget
  // R[write_budget_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_2_we),
    .wd     (write_budget_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg write_budget
  // R[write_budget_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_3_we),
    .wd     (write_budget_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[3].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg read_budget
  // R[read_budget_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_0_we),
    .wd     (read_budget_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg read_budget
  // R[read_budget_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_1_we),
    .wd     (read_budget_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg read_budget
  // R[read_budget_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_2_we),
    .wd     (read_budget_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg read_budget
  // R[read_budget_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_3_we),
    .wd     (read_budget_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[3].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg write_period
  // R[write_period_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_0_we),
    .wd     (write_period_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg write_period
  // R[write_period_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_1_we),
    .wd     (write_period_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg write_period
  // R[write_period_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_2_we),
    .wd     (write_period_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg write_period
  // R[write_period_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_3_we),
    .wd     (write_period_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[3].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg read_period
  // R[read_period_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_0_we),
    .wd     (read_period_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg read_period
  // R[read_period_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_1_we),
    .wd     (read_period_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg read_period
  // R[read_period_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_2_we),
    .wd     (read_period_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg read_period
  // R[read_period_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_3_we),
    .wd     (read_period_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[3].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg write_budget_left
  // R[write_budget_left_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_0 (
    .re     (write_budget_left_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_0_qs)
  );

  // Subregister 1 of Multireg write_budget_left
  // R[write_budget_left_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_1 (
    .re     (write_budget_left_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_1_qs)
  );

  // Subregister 2 of Multireg write_budget_left
  // R[write_budget_left_2]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_2 (
    .re     (write_budget_left_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_2_qs)
  );

  // Subregister 3 of Multireg write_budget_left
  // R[write_budget_left_3]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_3 (
    .re     (write_budget_left_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_3_qs)
  );



  // Subregister 0 of Multireg read_budget_left
  // R[read_budget_left_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_0 (
    .re     (read_budget_left_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_0_qs)
  );

  // Subregister 1 of Multireg read_budget_left
  // R[read_budget_left_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_1 (
    .re     (read_budget_left_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_1_qs)
  );

  // Subregister 2 of Multireg read_budget_left
  // R[read_budget_left_2]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_2 (
    .re     (read_budget_left_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_2_qs)
  );

  // Subregister 3 of Multireg read_budget_left
  // R[read_budget_left_3]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_3 (
    .re     (read_budget_left_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_3_qs)
  );



  // Subregister 0 of Multireg write_period_left
  // R[write_period_left_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_0 (
    .re     (write_period_left_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_0_qs)
  );

  // Subregister 1 of Multireg write_period_left
  // R[write_period_left_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_1 (
    .re     (write_period_left_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_1_qs)
  );

  // Subregister 2 of Multireg write_period_left
  // R[write_period_left_2]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_2 (
    .re     (write_period_left_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_2_qs)
  );

  // Subregister 3 of Multireg write_period_left
  // R[write_period_left_3]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_3 (
    .re     (write_period_left_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_3_qs)
  );



  // Subregister 0 of Multireg read_period_left
  // R[read_period_left_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_0 (
    .re     (read_period_left_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_0_qs)
  );

  // Subregister 1 of Multireg read_period_left
  // R[read_period_left_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_1 (
    .re     (read_period_left_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_1_qs)
  );

  // Subregister 2 of Multireg read_period_left
  // R[read_period_left_2]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_2 (
    .re     (read_period_left_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_2_qs)
  );

  // Subregister 3 of Multireg read_period_left
  // R[read_period_left_3]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_3 (
    .re     (read_period_left_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_3_qs)
  );



  // Subregister 0 of Multireg isolate
  // R[isolate]: V(True)

  // F[isolate_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolate_isolate_0 (
    .re     (isolate_isolate_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolate[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolate_isolate_0_qs)
  );


  // F[isolate_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolate_isolate_1 (
    .re     (isolate_isolate_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolate[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolate_isolate_1_qs)
  );




  // Subregister 0 of Multireg isolated
  // R[isolated]: V(True)

  // F[isolated_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_isolated_0 (
    .re     (isolated_isolated_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_isolated_0_qs)
  );


  // F[isolated_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_isolated_1 (
    .re     (isolated_isolated_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_isolated_1_qs)
  );



  // R[num_managers]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_num_managers (
    .re     (num_managers_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.num_managers.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (num_managers_qs)
  );


  // R[addr_width]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_addr_width (
    .re     (addr_width_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.addr_width.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (addr_width_qs)
  );


  // R[data_width]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_data_width (
    .re     (data_width_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.data_width.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (data_width_qs)
  );


  // R[id_width]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_id_width (
    .re     (id_width_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.id_width.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (id_width_qs)
  );


  // R[user_width]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_user_width (
    .re     (user_width_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.user_width.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (user_width_qs)
  );


  // R[num_pending]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_num_pending (
    .re     (num_pending_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.num_pending.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (num_pending_qs)
  );


  // R[w_buffer_depth]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_w_buffer_depth (
    .re     (w_buffer_depth_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.w_buffer_depth.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (w_buffer_depth_qs)
  );


  // R[num_addr_regions]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_num_addr_regions (
    .re     (num_addr_regions_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.num_addr_regions.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (num_addr_regions_qs)
  );


  // R[period_width]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_period_width (
    .re     (period_width_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.period_width.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (period_width_qs)
  );


  // R[budget_width]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_budget_width (
    .re     (budget_width_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.budget_width.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (budget_width_qs)
  );


  // R[max_num_managers]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h2)
  ) u_max_num_managers (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.max_num_managers.q ),

    // to register interface (read)
    .qs     (max_num_managers_qs)
  );




  logic [68:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == AXI_RT_MAJOR_VERSION_OFFSET);
    addr_hit[ 1] = (reg_addr == AXI_RT_MINOR_VERSION_OFFSET);
    addr_hit[ 2] = (reg_addr == AXI_RT_PATCH_VERSION_OFFSET);
    addr_hit[ 3] = (reg_addr == AXI_RT_RT_ENABLE_OFFSET);
    addr_hit[ 4] = (reg_addr == AXI_RT_RT_BYPASSED_OFFSET);
    addr_hit[ 5] = (reg_addr == AXI_RT_LEN_LIMIT_OFFSET);
    addr_hit[ 6] = (reg_addr == AXI_RT_IMTU_ENABLE_OFFSET);
    addr_hit[ 7] = (reg_addr == AXI_RT_IMTU_ABORT_OFFSET);
    addr_hit[ 8] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_0_OFFSET);
    addr_hit[ 9] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_1_OFFSET);
    addr_hit[10] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_2_OFFSET);
    addr_hit[11] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_3_OFFSET);
    addr_hit[12] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_0_OFFSET);
    addr_hit[13] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_1_OFFSET);
    addr_hit[14] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_2_OFFSET);
    addr_hit[15] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_3_OFFSET);
    addr_hit[16] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_0_OFFSET);
    addr_hit[17] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_1_OFFSET);
    addr_hit[18] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_2_OFFSET);
    addr_hit[19] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_3_OFFSET);
    addr_hit[20] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_0_OFFSET);
    addr_hit[21] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_1_OFFSET);
    addr_hit[22] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_2_OFFSET);
    addr_hit[23] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_3_OFFSET);
    addr_hit[24] = (reg_addr == AXI_RT_WRITE_BUDGET_0_OFFSET);
    addr_hit[25] = (reg_addr == AXI_RT_WRITE_BUDGET_1_OFFSET);
    addr_hit[26] = (reg_addr == AXI_RT_WRITE_BUDGET_2_OFFSET);
    addr_hit[27] = (reg_addr == AXI_RT_WRITE_BUDGET_3_OFFSET);
    addr_hit[28] = (reg_addr == AXI_RT_READ_BUDGET_0_OFFSET);
    addr_hit[29] = (reg_addr == AXI_RT_READ_BUDGET_1_OFFSET);
    addr_hit[30] = (reg_addr == AXI_RT_READ_BUDGET_2_OFFSET);
    addr_hit[31] = (reg_addr == AXI_RT_READ_BUDGET_3_OFFSET);
    addr_hit[32] = (reg_addr == AXI_RT_WRITE_PERIOD_0_OFFSET);
    addr_hit[33] = (reg_addr == AXI_RT_WRITE_PERIOD_1_OFFSET);
    addr_hit[34] = (reg_addr == AXI_RT_WRITE_PERIOD_2_OFFSET);
    addr_hit[35] = (reg_addr == AXI_RT_WRITE_PERIOD_3_OFFSET);
    addr_hit[36] = (reg_addr == AXI_RT_READ_PERIOD_0_OFFSET);
    addr_hit[37] = (reg_addr == AXI_RT_READ_PERIOD_1_OFFSET);
    addr_hit[38] = (reg_addr == AXI_RT_READ_PERIOD_2_OFFSET);
    addr_hit[39] = (reg_addr == AXI_RT_READ_PERIOD_3_OFFSET);
    addr_hit[40] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_0_OFFSET);
    addr_hit[41] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_1_OFFSET);
    addr_hit[42] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_2_OFFSET);
    addr_hit[43] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_3_OFFSET);
    addr_hit[44] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_0_OFFSET);
    addr_hit[45] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_1_OFFSET);
    addr_hit[46] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_2_OFFSET);
    addr_hit[47] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_3_OFFSET);
    addr_hit[48] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_0_OFFSET);
    addr_hit[49] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_1_OFFSET);
    addr_hit[50] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_2_OFFSET);
    addr_hit[51] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_3_OFFSET);
    addr_hit[52] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_0_OFFSET);
    addr_hit[53] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_1_OFFSET);
    addr_hit[54] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_2_OFFSET);
    addr_hit[55] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_3_OFFSET);
    addr_hit[56] = (reg_addr == AXI_RT_ISOLATE_OFFSET);
    addr_hit[57] = (reg_addr == AXI_RT_ISOLATED_OFFSET);
    addr_hit[58] = (reg_addr == AXI_RT_NUM_MANAGERS_OFFSET);
    addr_hit[59] = (reg_addr == AXI_RT_ADDR_WIDTH_OFFSET);
    addr_hit[60] = (reg_addr == AXI_RT_DATA_WIDTH_OFFSET);
    addr_hit[61] = (reg_addr == AXI_RT_ID_WIDTH_OFFSET);
    addr_hit[62] = (reg_addr == AXI_RT_USER_WIDTH_OFFSET);
    addr_hit[63] = (reg_addr == AXI_RT_NUM_PENDING_OFFSET);
    addr_hit[64] = (reg_addr == AXI_RT_W_BUFFER_DEPTH_OFFSET);
    addr_hit[65] = (reg_addr == AXI_RT_NUM_ADDR_REGIONS_OFFSET);
    addr_hit[66] = (reg_addr == AXI_RT_PERIOD_WIDTH_OFFSET);
    addr_hit[67] = (reg_addr == AXI_RT_BUDGET_WIDTH_OFFSET);
    addr_hit[68] = (reg_addr == AXI_RT_MAX_NUM_MANAGERS_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(AXI_RT_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(AXI_RT_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(AXI_RT_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(AXI_RT_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(AXI_RT_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(AXI_RT_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(AXI_RT_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(AXI_RT_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(AXI_RT_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(AXI_RT_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(AXI_RT_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(AXI_RT_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(AXI_RT_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(AXI_RT_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(AXI_RT_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(AXI_RT_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(AXI_RT_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(AXI_RT_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(AXI_RT_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(AXI_RT_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(AXI_RT_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(AXI_RT_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(AXI_RT_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(AXI_RT_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(AXI_RT_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(AXI_RT_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(AXI_RT_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(AXI_RT_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(AXI_RT_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(AXI_RT_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(AXI_RT_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(AXI_RT_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(AXI_RT_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(AXI_RT_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(AXI_RT_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(AXI_RT_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(AXI_RT_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(AXI_RT_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(AXI_RT_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(AXI_RT_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(AXI_RT_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(AXI_RT_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(AXI_RT_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(AXI_RT_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(AXI_RT_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(AXI_RT_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(AXI_RT_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(AXI_RT_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(AXI_RT_PERMIT[48] & ~reg_be))) |
               (addr_hit[49] & (|(AXI_RT_PERMIT[49] & ~reg_be))) |
               (addr_hit[50] & (|(AXI_RT_PERMIT[50] & ~reg_be))) |
               (addr_hit[51] & (|(AXI_RT_PERMIT[51] & ~reg_be))) |
               (addr_hit[52] & (|(AXI_RT_PERMIT[52] & ~reg_be))) |
               (addr_hit[53] & (|(AXI_RT_PERMIT[53] & ~reg_be))) |
               (addr_hit[54] & (|(AXI_RT_PERMIT[54] & ~reg_be))) |
               (addr_hit[55] & (|(AXI_RT_PERMIT[55] & ~reg_be))) |
               (addr_hit[56] & (|(AXI_RT_PERMIT[56] & ~reg_be))) |
               (addr_hit[57] & (|(AXI_RT_PERMIT[57] & ~reg_be))) |
               (addr_hit[58] & (|(AXI_RT_PERMIT[58] & ~reg_be))) |
               (addr_hit[59] & (|(AXI_RT_PERMIT[59] & ~reg_be))) |
               (addr_hit[60] & (|(AXI_RT_PERMIT[60] & ~reg_be))) |
               (addr_hit[61] & (|(AXI_RT_PERMIT[61] & ~reg_be))) |
               (addr_hit[62] & (|(AXI_RT_PERMIT[62] & ~reg_be))) |
               (addr_hit[63] & (|(AXI_RT_PERMIT[63] & ~reg_be))) |
               (addr_hit[64] & (|(AXI_RT_PERMIT[64] & ~reg_be))) |
               (addr_hit[65] & (|(AXI_RT_PERMIT[65] & ~reg_be))) |
               (addr_hit[66] & (|(AXI_RT_PERMIT[66] & ~reg_be))) |
               (addr_hit[67] & (|(AXI_RT_PERMIT[67] & ~reg_be))) |
               (addr_hit[68] & (|(AXI_RT_PERMIT[68] & ~reg_be)))));
  end

  assign rt_enable_enable_0_we = addr_hit[3] & reg_we & !reg_error;
  assign rt_enable_enable_0_wd = reg_wdata[0];

  assign rt_enable_enable_1_we = addr_hit[3] & reg_we & !reg_error;
  assign rt_enable_enable_1_wd = reg_wdata[1];

  assign rt_bypassed_bypassed_0_re = addr_hit[4] & reg_re & !reg_error;

  assign rt_bypassed_bypassed_1_re = addr_hit[4] & reg_re & !reg_error;

  assign len_limit_len_0_we = addr_hit[5] & reg_we & !reg_error;
  assign len_limit_len_0_wd = reg_wdata[7:0];

  assign len_limit_len_1_we = addr_hit[5] & reg_we & !reg_error;
  assign len_limit_len_1_wd = reg_wdata[15:8];

  assign imtu_enable_enable_0_we = addr_hit[6] & reg_we & !reg_error;
  assign imtu_enable_enable_0_wd = reg_wdata[0];

  assign imtu_enable_enable_1_we = addr_hit[6] & reg_we & !reg_error;
  assign imtu_enable_enable_1_wd = reg_wdata[1];

  assign imtu_abort_abort_0_we = addr_hit[7] & reg_we & !reg_error;
  assign imtu_abort_abort_0_wd = reg_wdata[0];

  assign imtu_abort_abort_1_we = addr_hit[7] & reg_we & !reg_error;
  assign imtu_abort_abort_1_wd = reg_wdata[1];

  assign start_addr_sub_low_0_we = addr_hit[8] & reg_we & !reg_error;
  assign start_addr_sub_low_0_wd = reg_wdata[31:0];

  assign start_addr_sub_low_1_we = addr_hit[9] & reg_we & !reg_error;
  assign start_addr_sub_low_1_wd = reg_wdata[31:0];

  assign start_addr_sub_low_2_we = addr_hit[10] & reg_we & !reg_error;
  assign start_addr_sub_low_2_wd = reg_wdata[31:0];

  assign start_addr_sub_low_3_we = addr_hit[11] & reg_we & !reg_error;
  assign start_addr_sub_low_3_wd = reg_wdata[31:0];

  assign start_addr_sub_high_0_we = addr_hit[12] & reg_we & !reg_error;
  assign start_addr_sub_high_0_wd = reg_wdata[31:0];

  assign start_addr_sub_high_1_we = addr_hit[13] & reg_we & !reg_error;
  assign start_addr_sub_high_1_wd = reg_wdata[31:0];

  assign start_addr_sub_high_2_we = addr_hit[14] & reg_we & !reg_error;
  assign start_addr_sub_high_2_wd = reg_wdata[31:0];

  assign start_addr_sub_high_3_we = addr_hit[15] & reg_we & !reg_error;
  assign start_addr_sub_high_3_wd = reg_wdata[31:0];

  assign end_addr_sub_low_0_we = addr_hit[16] & reg_we & !reg_error;
  assign end_addr_sub_low_0_wd = reg_wdata[31:0];

  assign end_addr_sub_low_1_we = addr_hit[17] & reg_we & !reg_error;
  assign end_addr_sub_low_1_wd = reg_wdata[31:0];

  assign end_addr_sub_low_2_we = addr_hit[18] & reg_we & !reg_error;
  assign end_addr_sub_low_2_wd = reg_wdata[31:0];

  assign end_addr_sub_low_3_we = addr_hit[19] & reg_we & !reg_error;
  assign end_addr_sub_low_3_wd = reg_wdata[31:0];

  assign end_addr_sub_high_0_we = addr_hit[20] & reg_we & !reg_error;
  assign end_addr_sub_high_0_wd = reg_wdata[31:0];

  assign end_addr_sub_high_1_we = addr_hit[21] & reg_we & !reg_error;
  assign end_addr_sub_high_1_wd = reg_wdata[31:0];

  assign end_addr_sub_high_2_we = addr_hit[22] & reg_we & !reg_error;
  assign end_addr_sub_high_2_wd = reg_wdata[31:0];

  assign end_addr_sub_high_3_we = addr_hit[23] & reg_we & !reg_error;
  assign end_addr_sub_high_3_wd = reg_wdata[31:0];

  assign write_budget_0_we = addr_hit[24] & reg_we & !reg_error;
  assign write_budget_0_wd = reg_wdata[31:0];

  assign write_budget_1_we = addr_hit[25] & reg_we & !reg_error;
  assign write_budget_1_wd = reg_wdata[31:0];

  assign write_budget_2_we = addr_hit[26] & reg_we & !reg_error;
  assign write_budget_2_wd = reg_wdata[31:0];

  assign write_budget_3_we = addr_hit[27] & reg_we & !reg_error;
  assign write_budget_3_wd = reg_wdata[31:0];

  assign read_budget_0_we = addr_hit[28] & reg_we & !reg_error;
  assign read_budget_0_wd = reg_wdata[31:0];

  assign read_budget_1_we = addr_hit[29] & reg_we & !reg_error;
  assign read_budget_1_wd = reg_wdata[31:0];

  assign read_budget_2_we = addr_hit[30] & reg_we & !reg_error;
  assign read_budget_2_wd = reg_wdata[31:0];

  assign read_budget_3_we = addr_hit[31] & reg_we & !reg_error;
  assign read_budget_3_wd = reg_wdata[31:0];

  assign write_period_0_we = addr_hit[32] & reg_we & !reg_error;
  assign write_period_0_wd = reg_wdata[31:0];

  assign write_period_1_we = addr_hit[33] & reg_we & !reg_error;
  assign write_period_1_wd = reg_wdata[31:0];

  assign write_period_2_we = addr_hit[34] & reg_we & !reg_error;
  assign write_period_2_wd = reg_wdata[31:0];

  assign write_period_3_we = addr_hit[35] & reg_we & !reg_error;
  assign write_period_3_wd = reg_wdata[31:0];

  assign read_period_0_we = addr_hit[36] & reg_we & !reg_error;
  assign read_period_0_wd = reg_wdata[31:0];

  assign read_period_1_we = addr_hit[37] & reg_we & !reg_error;
  assign read_period_1_wd = reg_wdata[31:0];

  assign read_period_2_we = addr_hit[38] & reg_we & !reg_error;
  assign read_period_2_wd = reg_wdata[31:0];

  assign read_period_3_we = addr_hit[39] & reg_we & !reg_error;
  assign read_period_3_wd = reg_wdata[31:0];

  assign write_budget_left_0_re = addr_hit[40] & reg_re & !reg_error;

  assign write_budget_left_1_re = addr_hit[41] & reg_re & !reg_error;

  assign write_budget_left_2_re = addr_hit[42] & reg_re & !reg_error;

  assign write_budget_left_3_re = addr_hit[43] & reg_re & !reg_error;

  assign read_budget_left_0_re = addr_hit[44] & reg_re & !reg_error;

  assign read_budget_left_1_re = addr_hit[45] & reg_re & !reg_error;

  assign read_budget_left_2_re = addr_hit[46] & reg_re & !reg_error;

  assign read_budget_left_3_re = addr_hit[47] & reg_re & !reg_error;

  assign write_period_left_0_re = addr_hit[48] & reg_re & !reg_error;

  assign write_period_left_1_re = addr_hit[49] & reg_re & !reg_error;

  assign write_period_left_2_re = addr_hit[50] & reg_re & !reg_error;

  assign write_period_left_3_re = addr_hit[51] & reg_re & !reg_error;

  assign read_period_left_0_re = addr_hit[52] & reg_re & !reg_error;

  assign read_period_left_1_re = addr_hit[53] & reg_re & !reg_error;

  assign read_period_left_2_re = addr_hit[54] & reg_re & !reg_error;

  assign read_period_left_3_re = addr_hit[55] & reg_re & !reg_error;

  assign isolate_isolate_0_re = addr_hit[56] & reg_re & !reg_error;

  assign isolate_isolate_1_re = addr_hit[56] & reg_re & !reg_error;

  assign isolated_isolated_0_re = addr_hit[57] & reg_re & !reg_error;

  assign isolated_isolated_1_re = addr_hit[57] & reg_re & !reg_error;

  assign num_managers_re = addr_hit[58] & reg_re & !reg_error;

  assign addr_width_re = addr_hit[59] & reg_re & !reg_error;

  assign data_width_re = addr_hit[60] & reg_re & !reg_error;

  assign id_width_re = addr_hit[61] & reg_re & !reg_error;

  assign user_width_re = addr_hit[62] & reg_re & !reg_error;

  assign num_pending_re = addr_hit[63] & reg_re & !reg_error;

  assign w_buffer_depth_re = addr_hit[64] & reg_re & !reg_error;

  assign num_addr_regions_re = addr_hit[65] & reg_re & !reg_error;

  assign period_width_re = addr_hit[66] & reg_re & !reg_error;

  assign budget_width_re = addr_hit[67] & reg_re & !reg_error;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = major_version_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = minor_version_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = patch_version_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = rt_bypassed_bypassed_0_qs;
        reg_rdata_next[1] = rt_bypassed_bypassed_1_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[7:0] = '0;
        reg_rdata_next[15:8] = '0;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = write_budget_left_0_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = write_budget_left_1_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[31:0] = write_budget_left_2_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[31:0] = write_budget_left_3_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = read_budget_left_0_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[31:0] = read_budget_left_1_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[31:0] = read_budget_left_2_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = read_budget_left_3_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[31:0] = write_period_left_0_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[31:0] = write_period_left_1_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[31:0] = write_period_left_2_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[31:0] = write_period_left_3_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[31:0] = read_period_left_0_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[31:0] = read_period_left_1_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[31:0] = read_period_left_2_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[31:0] = read_period_left_3_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[0] = isolate_isolate_0_qs;
        reg_rdata_next[1] = isolate_isolate_1_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[0] = isolated_isolated_0_qs;
        reg_rdata_next[1] = isolated_isolated_1_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[31:0] = num_managers_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[31:0] = addr_width_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[31:0] = data_width_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[31:0] = id_width_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[31:0] = user_width_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[31:0] = num_pending_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[31:0] = w_buffer_depth_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[31:0] = num_addr_regions_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[31:0] = period_width_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[31:0] = budget_width_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[31:0] = max_num_managers_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module axi_rt_reg_top_intf
#(
  parameter int AW = 9,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output axi_rt_reg_pkg::axi_rt_reg2hw_t reg2hw, // Write
  input  axi_rt_reg_pkg::axi_rt_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  axi_rt_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


