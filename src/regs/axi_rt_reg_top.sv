// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module axi_rt_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 10
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output axi_rt_reg_pkg::axi_rt_reg2hw_t reg2hw, // Write
  input  axi_rt_reg_pkg::axi_rt_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import axi_rt_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] major_version_qs;
  logic [31:0] minor_version_qs;
  logic [31:0] patch_version_qs;
  logic rt_enable_enable_0_wd;
  logic rt_enable_enable_0_we;
  logic rt_enable_enable_1_wd;
  logic rt_enable_enable_1_we;
  logic rt_enable_enable_2_wd;
  logic rt_enable_enable_2_we;
  logic rt_enable_enable_3_wd;
  logic rt_enable_enable_3_we;
  logic rt_enable_enable_4_wd;
  logic rt_enable_enable_4_we;
  logic rt_enable_enable_5_wd;
  logic rt_enable_enable_5_we;
  logic rt_enable_enable_6_wd;
  logic rt_enable_enable_6_we;
  logic rt_enable_enable_7_wd;
  logic rt_enable_enable_7_we;
  logic rt_bypassed_bypassed_0_qs;
  logic rt_bypassed_bypassed_0_re;
  logic rt_bypassed_bypassed_1_qs;
  logic rt_bypassed_bypassed_1_re;
  logic rt_bypassed_bypassed_2_qs;
  logic rt_bypassed_bypassed_2_re;
  logic rt_bypassed_bypassed_3_qs;
  logic rt_bypassed_bypassed_3_re;
  logic rt_bypassed_bypassed_4_qs;
  logic rt_bypassed_bypassed_4_re;
  logic rt_bypassed_bypassed_5_qs;
  logic rt_bypassed_bypassed_5_re;
  logic rt_bypassed_bypassed_6_qs;
  logic rt_bypassed_bypassed_6_re;
  logic rt_bypassed_bypassed_7_qs;
  logic rt_bypassed_bypassed_7_re;
  logic [7:0] len_limit_0_len_0_wd;
  logic len_limit_0_len_0_we;
  logic [7:0] len_limit_0_len_1_wd;
  logic len_limit_0_len_1_we;
  logic [7:0] len_limit_0_len_2_wd;
  logic len_limit_0_len_2_we;
  logic [7:0] len_limit_0_len_3_wd;
  logic len_limit_0_len_3_we;
  logic [7:0] len_limit_1_len_4_wd;
  logic len_limit_1_len_4_we;
  logic [7:0] len_limit_1_len_5_wd;
  logic len_limit_1_len_5_we;
  logic [7:0] len_limit_1_len_6_wd;
  logic len_limit_1_len_6_we;
  logic [7:0] len_limit_1_len_7_wd;
  logic len_limit_1_len_7_we;
  logic imtu_enable_enable_0_wd;
  logic imtu_enable_enable_0_we;
  logic imtu_enable_enable_1_wd;
  logic imtu_enable_enable_1_we;
  logic imtu_enable_enable_2_wd;
  logic imtu_enable_enable_2_we;
  logic imtu_enable_enable_3_wd;
  logic imtu_enable_enable_3_we;
  logic imtu_enable_enable_4_wd;
  logic imtu_enable_enable_4_we;
  logic imtu_enable_enable_5_wd;
  logic imtu_enable_enable_5_we;
  logic imtu_enable_enable_6_wd;
  logic imtu_enable_enable_6_we;
  logic imtu_enable_enable_7_wd;
  logic imtu_enable_enable_7_we;
  logic imtu_abort_abort_0_wd;
  logic imtu_abort_abort_0_we;
  logic imtu_abort_abort_1_wd;
  logic imtu_abort_abort_1_we;
  logic imtu_abort_abort_2_wd;
  logic imtu_abort_abort_2_we;
  logic imtu_abort_abort_3_wd;
  logic imtu_abort_abort_3_we;
  logic imtu_abort_abort_4_wd;
  logic imtu_abort_abort_4_we;
  logic imtu_abort_abort_5_wd;
  logic imtu_abort_abort_5_we;
  logic imtu_abort_abort_6_wd;
  logic imtu_abort_abort_6_we;
  logic imtu_abort_abort_7_wd;
  logic imtu_abort_abort_7_we;
  logic [31:0] start_addr_sub_low_0_wd;
  logic start_addr_sub_low_0_we;
  logic [31:0] start_addr_sub_low_1_wd;
  logic start_addr_sub_low_1_we;
  logic [31:0] start_addr_sub_low_2_wd;
  logic start_addr_sub_low_2_we;
  logic [31:0] start_addr_sub_low_3_wd;
  logic start_addr_sub_low_3_we;
  logic [31:0] start_addr_sub_low_4_wd;
  logic start_addr_sub_low_4_we;
  logic [31:0] start_addr_sub_low_5_wd;
  logic start_addr_sub_low_5_we;
  logic [31:0] start_addr_sub_low_6_wd;
  logic start_addr_sub_low_6_we;
  logic [31:0] start_addr_sub_low_7_wd;
  logic start_addr_sub_low_7_we;
  logic [31:0] start_addr_sub_low_8_wd;
  logic start_addr_sub_low_8_we;
  logic [31:0] start_addr_sub_low_9_wd;
  logic start_addr_sub_low_9_we;
  logic [31:0] start_addr_sub_low_10_wd;
  logic start_addr_sub_low_10_we;
  logic [31:0] start_addr_sub_low_11_wd;
  logic start_addr_sub_low_11_we;
  logic [31:0] start_addr_sub_low_12_wd;
  logic start_addr_sub_low_12_we;
  logic [31:0] start_addr_sub_low_13_wd;
  logic start_addr_sub_low_13_we;
  logic [31:0] start_addr_sub_low_14_wd;
  logic start_addr_sub_low_14_we;
  logic [31:0] start_addr_sub_low_15_wd;
  logic start_addr_sub_low_15_we;
  logic [31:0] start_addr_sub_high_0_wd;
  logic start_addr_sub_high_0_we;
  logic [31:0] start_addr_sub_high_1_wd;
  logic start_addr_sub_high_1_we;
  logic [31:0] start_addr_sub_high_2_wd;
  logic start_addr_sub_high_2_we;
  logic [31:0] start_addr_sub_high_3_wd;
  logic start_addr_sub_high_3_we;
  logic [31:0] start_addr_sub_high_4_wd;
  logic start_addr_sub_high_4_we;
  logic [31:0] start_addr_sub_high_5_wd;
  logic start_addr_sub_high_5_we;
  logic [31:0] start_addr_sub_high_6_wd;
  logic start_addr_sub_high_6_we;
  logic [31:0] start_addr_sub_high_7_wd;
  logic start_addr_sub_high_7_we;
  logic [31:0] start_addr_sub_high_8_wd;
  logic start_addr_sub_high_8_we;
  logic [31:0] start_addr_sub_high_9_wd;
  logic start_addr_sub_high_9_we;
  logic [31:0] start_addr_sub_high_10_wd;
  logic start_addr_sub_high_10_we;
  logic [31:0] start_addr_sub_high_11_wd;
  logic start_addr_sub_high_11_we;
  logic [31:0] start_addr_sub_high_12_wd;
  logic start_addr_sub_high_12_we;
  logic [31:0] start_addr_sub_high_13_wd;
  logic start_addr_sub_high_13_we;
  logic [31:0] start_addr_sub_high_14_wd;
  logic start_addr_sub_high_14_we;
  logic [31:0] start_addr_sub_high_15_wd;
  logic start_addr_sub_high_15_we;
  logic [31:0] end_addr_sub_low_0_wd;
  logic end_addr_sub_low_0_we;
  logic [31:0] end_addr_sub_low_1_wd;
  logic end_addr_sub_low_1_we;
  logic [31:0] end_addr_sub_low_2_wd;
  logic end_addr_sub_low_2_we;
  logic [31:0] end_addr_sub_low_3_wd;
  logic end_addr_sub_low_3_we;
  logic [31:0] end_addr_sub_low_4_wd;
  logic end_addr_sub_low_4_we;
  logic [31:0] end_addr_sub_low_5_wd;
  logic end_addr_sub_low_5_we;
  logic [31:0] end_addr_sub_low_6_wd;
  logic end_addr_sub_low_6_we;
  logic [31:0] end_addr_sub_low_7_wd;
  logic end_addr_sub_low_7_we;
  logic [31:0] end_addr_sub_low_8_wd;
  logic end_addr_sub_low_8_we;
  logic [31:0] end_addr_sub_low_9_wd;
  logic end_addr_sub_low_9_we;
  logic [31:0] end_addr_sub_low_10_wd;
  logic end_addr_sub_low_10_we;
  logic [31:0] end_addr_sub_low_11_wd;
  logic end_addr_sub_low_11_we;
  logic [31:0] end_addr_sub_low_12_wd;
  logic end_addr_sub_low_12_we;
  logic [31:0] end_addr_sub_low_13_wd;
  logic end_addr_sub_low_13_we;
  logic [31:0] end_addr_sub_low_14_wd;
  logic end_addr_sub_low_14_we;
  logic [31:0] end_addr_sub_low_15_wd;
  logic end_addr_sub_low_15_we;
  logic [31:0] end_addr_sub_high_0_wd;
  logic end_addr_sub_high_0_we;
  logic [31:0] end_addr_sub_high_1_wd;
  logic end_addr_sub_high_1_we;
  logic [31:0] end_addr_sub_high_2_wd;
  logic end_addr_sub_high_2_we;
  logic [31:0] end_addr_sub_high_3_wd;
  logic end_addr_sub_high_3_we;
  logic [31:0] end_addr_sub_high_4_wd;
  logic end_addr_sub_high_4_we;
  logic [31:0] end_addr_sub_high_5_wd;
  logic end_addr_sub_high_5_we;
  logic [31:0] end_addr_sub_high_6_wd;
  logic end_addr_sub_high_6_we;
  logic [31:0] end_addr_sub_high_7_wd;
  logic end_addr_sub_high_7_we;
  logic [31:0] end_addr_sub_high_8_wd;
  logic end_addr_sub_high_8_we;
  logic [31:0] end_addr_sub_high_9_wd;
  logic end_addr_sub_high_9_we;
  logic [31:0] end_addr_sub_high_10_wd;
  logic end_addr_sub_high_10_we;
  logic [31:0] end_addr_sub_high_11_wd;
  logic end_addr_sub_high_11_we;
  logic [31:0] end_addr_sub_high_12_wd;
  logic end_addr_sub_high_12_we;
  logic [31:0] end_addr_sub_high_13_wd;
  logic end_addr_sub_high_13_we;
  logic [31:0] end_addr_sub_high_14_wd;
  logic end_addr_sub_high_14_we;
  logic [31:0] end_addr_sub_high_15_wd;
  logic end_addr_sub_high_15_we;
  logic [31:0] write_budget_0_wd;
  logic write_budget_0_we;
  logic [31:0] write_budget_1_wd;
  logic write_budget_1_we;
  logic [31:0] write_budget_2_wd;
  logic write_budget_2_we;
  logic [31:0] write_budget_3_wd;
  logic write_budget_3_we;
  logic [31:0] write_budget_4_wd;
  logic write_budget_4_we;
  logic [31:0] write_budget_5_wd;
  logic write_budget_5_we;
  logic [31:0] write_budget_6_wd;
  logic write_budget_6_we;
  logic [31:0] write_budget_7_wd;
  logic write_budget_7_we;
  logic [31:0] write_budget_8_wd;
  logic write_budget_8_we;
  logic [31:0] write_budget_9_wd;
  logic write_budget_9_we;
  logic [31:0] write_budget_10_wd;
  logic write_budget_10_we;
  logic [31:0] write_budget_11_wd;
  logic write_budget_11_we;
  logic [31:0] write_budget_12_wd;
  logic write_budget_12_we;
  logic [31:0] write_budget_13_wd;
  logic write_budget_13_we;
  logic [31:0] write_budget_14_wd;
  logic write_budget_14_we;
  logic [31:0] write_budget_15_wd;
  logic write_budget_15_we;
  logic [31:0] read_budget_0_wd;
  logic read_budget_0_we;
  logic [31:0] read_budget_1_wd;
  logic read_budget_1_we;
  logic [31:0] read_budget_2_wd;
  logic read_budget_2_we;
  logic [31:0] read_budget_3_wd;
  logic read_budget_3_we;
  logic [31:0] read_budget_4_wd;
  logic read_budget_4_we;
  logic [31:0] read_budget_5_wd;
  logic read_budget_5_we;
  logic [31:0] read_budget_6_wd;
  logic read_budget_6_we;
  logic [31:0] read_budget_7_wd;
  logic read_budget_7_we;
  logic [31:0] read_budget_8_wd;
  logic read_budget_8_we;
  logic [31:0] read_budget_9_wd;
  logic read_budget_9_we;
  logic [31:0] read_budget_10_wd;
  logic read_budget_10_we;
  logic [31:0] read_budget_11_wd;
  logic read_budget_11_we;
  logic [31:0] read_budget_12_wd;
  logic read_budget_12_we;
  logic [31:0] read_budget_13_wd;
  logic read_budget_13_we;
  logic [31:0] read_budget_14_wd;
  logic read_budget_14_we;
  logic [31:0] read_budget_15_wd;
  logic read_budget_15_we;
  logic [31:0] write_period_0_wd;
  logic write_period_0_we;
  logic [31:0] write_period_1_wd;
  logic write_period_1_we;
  logic [31:0] write_period_2_wd;
  logic write_period_2_we;
  logic [31:0] write_period_3_wd;
  logic write_period_3_we;
  logic [31:0] write_period_4_wd;
  logic write_period_4_we;
  logic [31:0] write_period_5_wd;
  logic write_period_5_we;
  logic [31:0] write_period_6_wd;
  logic write_period_6_we;
  logic [31:0] write_period_7_wd;
  logic write_period_7_we;
  logic [31:0] write_period_8_wd;
  logic write_period_8_we;
  logic [31:0] write_period_9_wd;
  logic write_period_9_we;
  logic [31:0] write_period_10_wd;
  logic write_period_10_we;
  logic [31:0] write_period_11_wd;
  logic write_period_11_we;
  logic [31:0] write_period_12_wd;
  logic write_period_12_we;
  logic [31:0] write_period_13_wd;
  logic write_period_13_we;
  logic [31:0] write_period_14_wd;
  logic write_period_14_we;
  logic [31:0] write_period_15_wd;
  logic write_period_15_we;
  logic [31:0] read_period_0_wd;
  logic read_period_0_we;
  logic [31:0] read_period_1_wd;
  logic read_period_1_we;
  logic [31:0] read_period_2_wd;
  logic read_period_2_we;
  logic [31:0] read_period_3_wd;
  logic read_period_3_we;
  logic [31:0] read_period_4_wd;
  logic read_period_4_we;
  logic [31:0] read_period_5_wd;
  logic read_period_5_we;
  logic [31:0] read_period_6_wd;
  logic read_period_6_we;
  logic [31:0] read_period_7_wd;
  logic read_period_7_we;
  logic [31:0] read_period_8_wd;
  logic read_period_8_we;
  logic [31:0] read_period_9_wd;
  logic read_period_9_we;
  logic [31:0] read_period_10_wd;
  logic read_period_10_we;
  logic [31:0] read_period_11_wd;
  logic read_period_11_we;
  logic [31:0] read_period_12_wd;
  logic read_period_12_we;
  logic [31:0] read_period_13_wd;
  logic read_period_13_we;
  logic [31:0] read_period_14_wd;
  logic read_period_14_we;
  logic [31:0] read_period_15_wd;
  logic read_period_15_we;
  logic [31:0] write_budget_left_0_qs;
  logic write_budget_left_0_re;
  logic [31:0] write_budget_left_1_qs;
  logic write_budget_left_1_re;
  logic [31:0] write_budget_left_2_qs;
  logic write_budget_left_2_re;
  logic [31:0] write_budget_left_3_qs;
  logic write_budget_left_3_re;
  logic [31:0] write_budget_left_4_qs;
  logic write_budget_left_4_re;
  logic [31:0] write_budget_left_5_qs;
  logic write_budget_left_5_re;
  logic [31:0] write_budget_left_6_qs;
  logic write_budget_left_6_re;
  logic [31:0] write_budget_left_7_qs;
  logic write_budget_left_7_re;
  logic [31:0] write_budget_left_8_qs;
  logic write_budget_left_8_re;
  logic [31:0] write_budget_left_9_qs;
  logic write_budget_left_9_re;
  logic [31:0] write_budget_left_10_qs;
  logic write_budget_left_10_re;
  logic [31:0] write_budget_left_11_qs;
  logic write_budget_left_11_re;
  logic [31:0] write_budget_left_12_qs;
  logic write_budget_left_12_re;
  logic [31:0] write_budget_left_13_qs;
  logic write_budget_left_13_re;
  logic [31:0] write_budget_left_14_qs;
  logic write_budget_left_14_re;
  logic [31:0] write_budget_left_15_qs;
  logic write_budget_left_15_re;
  logic [31:0] read_budget_left_0_qs;
  logic read_budget_left_0_re;
  logic [31:0] read_budget_left_1_qs;
  logic read_budget_left_1_re;
  logic [31:0] read_budget_left_2_qs;
  logic read_budget_left_2_re;
  logic [31:0] read_budget_left_3_qs;
  logic read_budget_left_3_re;
  logic [31:0] read_budget_left_4_qs;
  logic read_budget_left_4_re;
  logic [31:0] read_budget_left_5_qs;
  logic read_budget_left_5_re;
  logic [31:0] read_budget_left_6_qs;
  logic read_budget_left_6_re;
  logic [31:0] read_budget_left_7_qs;
  logic read_budget_left_7_re;
  logic [31:0] read_budget_left_8_qs;
  logic read_budget_left_8_re;
  logic [31:0] read_budget_left_9_qs;
  logic read_budget_left_9_re;
  logic [31:0] read_budget_left_10_qs;
  logic read_budget_left_10_re;
  logic [31:0] read_budget_left_11_qs;
  logic read_budget_left_11_re;
  logic [31:0] read_budget_left_12_qs;
  logic read_budget_left_12_re;
  logic [31:0] read_budget_left_13_qs;
  logic read_budget_left_13_re;
  logic [31:0] read_budget_left_14_qs;
  logic read_budget_left_14_re;
  logic [31:0] read_budget_left_15_qs;
  logic read_budget_left_15_re;
  logic [31:0] write_period_left_0_qs;
  logic write_period_left_0_re;
  logic [31:0] write_period_left_1_qs;
  logic write_period_left_1_re;
  logic [31:0] write_period_left_2_qs;
  logic write_period_left_2_re;
  logic [31:0] write_period_left_3_qs;
  logic write_period_left_3_re;
  logic [31:0] write_period_left_4_qs;
  logic write_period_left_4_re;
  logic [31:0] write_period_left_5_qs;
  logic write_period_left_5_re;
  logic [31:0] write_period_left_6_qs;
  logic write_period_left_6_re;
  logic [31:0] write_period_left_7_qs;
  logic write_period_left_7_re;
  logic [31:0] write_period_left_8_qs;
  logic write_period_left_8_re;
  logic [31:0] write_period_left_9_qs;
  logic write_period_left_9_re;
  logic [31:0] write_period_left_10_qs;
  logic write_period_left_10_re;
  logic [31:0] write_period_left_11_qs;
  logic write_period_left_11_re;
  logic [31:0] write_period_left_12_qs;
  logic write_period_left_12_re;
  logic [31:0] write_period_left_13_qs;
  logic write_period_left_13_re;
  logic [31:0] write_period_left_14_qs;
  logic write_period_left_14_re;
  logic [31:0] write_period_left_15_qs;
  logic write_period_left_15_re;
  logic [31:0] read_period_left_0_qs;
  logic read_period_left_0_re;
  logic [31:0] read_period_left_1_qs;
  logic read_period_left_1_re;
  logic [31:0] read_period_left_2_qs;
  logic read_period_left_2_re;
  logic [31:0] read_period_left_3_qs;
  logic read_period_left_3_re;
  logic [31:0] read_period_left_4_qs;
  logic read_period_left_4_re;
  logic [31:0] read_period_left_5_qs;
  logic read_period_left_5_re;
  logic [31:0] read_period_left_6_qs;
  logic read_period_left_6_re;
  logic [31:0] read_period_left_7_qs;
  logic read_period_left_7_re;
  logic [31:0] read_period_left_8_qs;
  logic read_period_left_8_re;
  logic [31:0] read_period_left_9_qs;
  logic read_period_left_9_re;
  logic [31:0] read_period_left_10_qs;
  logic read_period_left_10_re;
  logic [31:0] read_period_left_11_qs;
  logic read_period_left_11_re;
  logic [31:0] read_period_left_12_qs;
  logic read_period_left_12_re;
  logic [31:0] read_period_left_13_qs;
  logic read_period_left_13_re;
  logic [31:0] read_period_left_14_qs;
  logic read_period_left_14_re;
  logic [31:0] read_period_left_15_qs;
  logic read_period_left_15_re;
  logic isolate_isolate_0_qs;
  logic isolate_isolate_0_re;
  logic isolate_isolate_1_qs;
  logic isolate_isolate_1_re;
  logic isolate_isolate_2_qs;
  logic isolate_isolate_2_re;
  logic isolate_isolate_3_qs;
  logic isolate_isolate_3_re;
  logic isolate_isolate_4_qs;
  logic isolate_isolate_4_re;
  logic isolate_isolate_5_qs;
  logic isolate_isolate_5_re;
  logic isolate_isolate_6_qs;
  logic isolate_isolate_6_re;
  logic isolate_isolate_7_qs;
  logic isolate_isolate_7_re;
  logic isolated_isolated_0_qs;
  logic isolated_isolated_0_re;
  logic isolated_isolated_1_qs;
  logic isolated_isolated_1_re;
  logic isolated_isolated_2_qs;
  logic isolated_isolated_2_re;
  logic isolated_isolated_3_qs;
  logic isolated_isolated_3_re;
  logic isolated_isolated_4_qs;
  logic isolated_isolated_4_re;
  logic isolated_isolated_5_qs;
  logic isolated_isolated_5_re;
  logic isolated_isolated_6_qs;
  logic isolated_isolated_6_re;
  logic isolated_isolated_7_qs;
  logic isolated_isolated_7_re;
  logic [31:0] num_managers_qs;
  logic num_managers_re;
  logic [31:0] addr_width_qs;
  logic addr_width_re;
  logic [31:0] data_width_qs;
  logic data_width_re;
  logic [31:0] id_width_qs;
  logic id_width_re;
  logic [31:0] user_width_qs;
  logic user_width_re;
  logic [31:0] num_pending_qs;
  logic num_pending_re;
  logic [31:0] w_buffer_depth_qs;
  logic w_buffer_depth_re;
  logic [31:0] num_addr_regions_qs;
  logic num_addr_regions_re;
  logic [31:0] period_width_qs;
  logic period_width_re;
  logic [31:0] budget_width_qs;
  logic budget_width_re;
  logic [31:0] max_num_managers_qs;

  // Register instances
  // R[major_version]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_major_version (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.major_version.q ),

    // to register interface (read)
    .qs     (major_version_qs)
  );


  // R[minor_version]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_minor_version (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.minor_version.q ),

    // to register interface (read)
    .qs     (minor_version_qs)
  );


  // R[patch_version]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_patch_version (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.patch_version.q ),

    // to register interface (read)
    .qs     (patch_version_qs)
  );



  // Subregister 0 of Multireg rt_enable
  // R[rt_enable]: V(False)

  // F[enable_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_rt_enable_enable_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_enable_enable_0_we),
    .wd     (rt_enable_enable_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_enable[0].q ),

    .qs     ()
  );


  // F[enable_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_rt_enable_enable_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_enable_enable_1_we),
    .wd     (rt_enable_enable_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_enable[1].q ),

    .qs     ()
  );


  // F[enable_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_rt_enable_enable_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_enable_enable_2_we),
    .wd     (rt_enable_enable_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_enable[2].q ),

    .qs     ()
  );


  // F[enable_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_rt_enable_enable_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_enable_enable_3_we),
    .wd     (rt_enable_enable_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_enable[3].q ),

    .qs     ()
  );


  // F[enable_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_rt_enable_enable_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_enable_enable_4_we),
    .wd     (rt_enable_enable_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_enable[4].q ),

    .qs     ()
  );


  // F[enable_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_rt_enable_enable_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_enable_enable_5_we),
    .wd     (rt_enable_enable_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_enable[5].q ),

    .qs     ()
  );


  // F[enable_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_rt_enable_enable_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_enable_enable_6_we),
    .wd     (rt_enable_enable_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_enable[6].q ),

    .qs     ()
  );


  // F[enable_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_rt_enable_enable_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rt_enable_enable_7_we),
    .wd     (rt_enable_enable_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rt_enable[7].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg rt_bypassed
  // R[rt_bypassed]: V(True)

  // F[bypassed_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_rt_bypassed_bypassed_0 (
    .re     (rt_bypassed_bypassed_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rt_bypassed[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (rt_bypassed_bypassed_0_qs)
  );


  // F[bypassed_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_rt_bypassed_bypassed_1 (
    .re     (rt_bypassed_bypassed_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rt_bypassed[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (rt_bypassed_bypassed_1_qs)
  );


  // F[bypassed_2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_rt_bypassed_bypassed_2 (
    .re     (rt_bypassed_bypassed_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rt_bypassed[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (rt_bypassed_bypassed_2_qs)
  );


  // F[bypassed_3]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_rt_bypassed_bypassed_3 (
    .re     (rt_bypassed_bypassed_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rt_bypassed[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (rt_bypassed_bypassed_3_qs)
  );


  // F[bypassed_4]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_rt_bypassed_bypassed_4 (
    .re     (rt_bypassed_bypassed_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rt_bypassed[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (rt_bypassed_bypassed_4_qs)
  );


  // F[bypassed_5]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_rt_bypassed_bypassed_5 (
    .re     (rt_bypassed_bypassed_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rt_bypassed[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (rt_bypassed_bypassed_5_qs)
  );


  // F[bypassed_6]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_rt_bypassed_bypassed_6 (
    .re     (rt_bypassed_bypassed_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rt_bypassed[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (rt_bypassed_bypassed_6_qs)
  );


  // F[bypassed_7]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_rt_bypassed_bypassed_7 (
    .re     (rt_bypassed_bypassed_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rt_bypassed[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (rt_bypassed_bypassed_7_qs)
  );




  // Subregister 0 of Multireg len_limit
  // R[len_limit_0]: V(False)

  // F[len_0]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_len_limit_0_len_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (len_limit_0_len_0_we),
    .wd     (len_limit_0_len_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.len_limit[0].q ),

    .qs     ()
  );


  // F[len_1]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_len_limit_0_len_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (len_limit_0_len_1_we),
    .wd     (len_limit_0_len_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.len_limit[1].q ),

    .qs     ()
  );


  // F[len_2]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_len_limit_0_len_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (len_limit_0_len_2_we),
    .wd     (len_limit_0_len_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.len_limit[2].q ),

    .qs     ()
  );


  // F[len_3]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_len_limit_0_len_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (len_limit_0_len_3_we),
    .wd     (len_limit_0_len_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.len_limit[3].q ),

    .qs     ()
  );


  // Subregister 4 of Multireg len_limit
  // R[len_limit_1]: V(False)

  // F[len_4]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_len_limit_1_len_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (len_limit_1_len_4_we),
    .wd     (len_limit_1_len_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.len_limit[4].q ),

    .qs     ()
  );


  // F[len_5]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_len_limit_1_len_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (len_limit_1_len_5_we),
    .wd     (len_limit_1_len_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.len_limit[5].q ),

    .qs     ()
  );


  // F[len_6]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_len_limit_1_len_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (len_limit_1_len_6_we),
    .wd     (len_limit_1_len_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.len_limit[6].q ),

    .qs     ()
  );


  // F[len_7]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_len_limit_1_len_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (len_limit_1_len_7_we),
    .wd     (len_limit_1_len_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.len_limit[7].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg imtu_enable
  // R[imtu_enable]: V(False)

  // F[enable_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_enable_enable_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_enable_enable_0_we),
    .wd     (imtu_enable_enable_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_enable[0].q ),

    .qs     ()
  );


  // F[enable_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_enable_enable_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_enable_enable_1_we),
    .wd     (imtu_enable_enable_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_enable[1].q ),

    .qs     ()
  );


  // F[enable_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_enable_enable_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_enable_enable_2_we),
    .wd     (imtu_enable_enable_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_enable[2].q ),

    .qs     ()
  );


  // F[enable_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_enable_enable_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_enable_enable_3_we),
    .wd     (imtu_enable_enable_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_enable[3].q ),

    .qs     ()
  );


  // F[enable_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_enable_enable_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_enable_enable_4_we),
    .wd     (imtu_enable_enable_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_enable[4].q ),

    .qs     ()
  );


  // F[enable_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_enable_enable_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_enable_enable_5_we),
    .wd     (imtu_enable_enable_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_enable[5].q ),

    .qs     ()
  );


  // F[enable_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_enable_enable_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_enable_enable_6_we),
    .wd     (imtu_enable_enable_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_enable[6].q ),

    .qs     ()
  );


  // F[enable_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_enable_enable_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_enable_enable_7_we),
    .wd     (imtu_enable_enable_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_enable[7].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg imtu_abort
  // R[imtu_abort]: V(False)

  // F[abort_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_abort_abort_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_abort_abort_0_we),
    .wd     (imtu_abort_abort_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_abort[0].q ),

    .qs     ()
  );


  // F[abort_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_abort_abort_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_abort_abort_1_we),
    .wd     (imtu_abort_abort_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_abort[1].q ),

    .qs     ()
  );


  // F[abort_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_abort_abort_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_abort_abort_2_we),
    .wd     (imtu_abort_abort_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_abort[2].q ),

    .qs     ()
  );


  // F[abort_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_abort_abort_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_abort_abort_3_we),
    .wd     (imtu_abort_abort_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_abort[3].q ),

    .qs     ()
  );


  // F[abort_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_abort_abort_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_abort_abort_4_we),
    .wd     (imtu_abort_abort_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_abort[4].q ),

    .qs     ()
  );


  // F[abort_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_abort_abort_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_abort_abort_5_we),
    .wd     (imtu_abort_abort_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_abort[5].q ),

    .qs     ()
  );


  // F[abort_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_abort_abort_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_abort_abort_6_we),
    .wd     (imtu_abort_abort_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_abort[6].q ),

    .qs     ()
  );


  // F[abort_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_imtu_abort_abort_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (imtu_abort_abort_7_we),
    .wd     (imtu_abort_abort_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.imtu_abort[7].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_0_we),
    .wd     (start_addr_sub_low_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_1_we),
    .wd     (start_addr_sub_low_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_2_we),
    .wd     (start_addr_sub_low_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_3_we),
    .wd     (start_addr_sub_low_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[3].q ),

    .qs     ()
  );

  // Subregister 4 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_4_we),
    .wd     (start_addr_sub_low_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[4].q ),

    .qs     ()
  );

  // Subregister 5 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_5_we),
    .wd     (start_addr_sub_low_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[5].q ),

    .qs     ()
  );

  // Subregister 6 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_6_we),
    .wd     (start_addr_sub_low_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[6].q ),

    .qs     ()
  );

  // Subregister 7 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_7_we),
    .wd     (start_addr_sub_low_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[7].q ),

    .qs     ()
  );

  // Subregister 8 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_8_we),
    .wd     (start_addr_sub_low_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[8].q ),

    .qs     ()
  );

  // Subregister 9 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_9_we),
    .wd     (start_addr_sub_low_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[9].q ),

    .qs     ()
  );

  // Subregister 10 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_10_we),
    .wd     (start_addr_sub_low_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[10].q ),

    .qs     ()
  );

  // Subregister 11 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_11_we),
    .wd     (start_addr_sub_low_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[11].q ),

    .qs     ()
  );

  // Subregister 12 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_12_we),
    .wd     (start_addr_sub_low_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[12].q ),

    .qs     ()
  );

  // Subregister 13 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_13_we),
    .wd     (start_addr_sub_low_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[13].q ),

    .qs     ()
  );

  // Subregister 14 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_14_we),
    .wd     (start_addr_sub_low_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[14].q ),

    .qs     ()
  );

  // Subregister 15 of Multireg start_addr_sub_low
  // R[start_addr_sub_low_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_low_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_low_15_we),
    .wd     (start_addr_sub_low_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_low[15].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_0_we),
    .wd     (start_addr_sub_high_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_1_we),
    .wd     (start_addr_sub_high_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_2_we),
    .wd     (start_addr_sub_high_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_3_we),
    .wd     (start_addr_sub_high_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[3].q ),

    .qs     ()
  );

  // Subregister 4 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_4_we),
    .wd     (start_addr_sub_high_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[4].q ),

    .qs     ()
  );

  // Subregister 5 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_5_we),
    .wd     (start_addr_sub_high_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[5].q ),

    .qs     ()
  );

  // Subregister 6 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_6_we),
    .wd     (start_addr_sub_high_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[6].q ),

    .qs     ()
  );

  // Subregister 7 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_7_we),
    .wd     (start_addr_sub_high_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[7].q ),

    .qs     ()
  );

  // Subregister 8 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_8_we),
    .wd     (start_addr_sub_high_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[8].q ),

    .qs     ()
  );

  // Subregister 9 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_9_we),
    .wd     (start_addr_sub_high_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[9].q ),

    .qs     ()
  );

  // Subregister 10 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_10_we),
    .wd     (start_addr_sub_high_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[10].q ),

    .qs     ()
  );

  // Subregister 11 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_11_we),
    .wd     (start_addr_sub_high_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[11].q ),

    .qs     ()
  );

  // Subregister 12 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_12_we),
    .wd     (start_addr_sub_high_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[12].q ),

    .qs     ()
  );

  // Subregister 13 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_13_we),
    .wd     (start_addr_sub_high_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[13].q ),

    .qs     ()
  );

  // Subregister 14 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_14_we),
    .wd     (start_addr_sub_high_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[14].q ),

    .qs     ()
  );

  // Subregister 15 of Multireg start_addr_sub_high
  // R[start_addr_sub_high_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_start_addr_sub_high_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_addr_sub_high_15_we),
    .wd     (start_addr_sub_high_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start_addr_sub_high[15].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_0_we),
    .wd     (end_addr_sub_low_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_1_we),
    .wd     (end_addr_sub_low_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_2_we),
    .wd     (end_addr_sub_low_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_3_we),
    .wd     (end_addr_sub_low_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[3].q ),

    .qs     ()
  );

  // Subregister 4 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_4_we),
    .wd     (end_addr_sub_low_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[4].q ),

    .qs     ()
  );

  // Subregister 5 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_5_we),
    .wd     (end_addr_sub_low_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[5].q ),

    .qs     ()
  );

  // Subregister 6 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_6_we),
    .wd     (end_addr_sub_low_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[6].q ),

    .qs     ()
  );

  // Subregister 7 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_7_we),
    .wd     (end_addr_sub_low_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[7].q ),

    .qs     ()
  );

  // Subregister 8 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_8_we),
    .wd     (end_addr_sub_low_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[8].q ),

    .qs     ()
  );

  // Subregister 9 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_9_we),
    .wd     (end_addr_sub_low_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[9].q ),

    .qs     ()
  );

  // Subregister 10 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_10_we),
    .wd     (end_addr_sub_low_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[10].q ),

    .qs     ()
  );

  // Subregister 11 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_11_we),
    .wd     (end_addr_sub_low_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[11].q ),

    .qs     ()
  );

  // Subregister 12 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_12_we),
    .wd     (end_addr_sub_low_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[12].q ),

    .qs     ()
  );

  // Subregister 13 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_13_we),
    .wd     (end_addr_sub_low_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[13].q ),

    .qs     ()
  );

  // Subregister 14 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_14_we),
    .wd     (end_addr_sub_low_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[14].q ),

    .qs     ()
  );

  // Subregister 15 of Multireg end_addr_sub_low
  // R[end_addr_sub_low_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_low_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_low_15_we),
    .wd     (end_addr_sub_low_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_low[15].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_0_we),
    .wd     (end_addr_sub_high_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_1_we),
    .wd     (end_addr_sub_high_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_2_we),
    .wd     (end_addr_sub_high_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_3_we),
    .wd     (end_addr_sub_high_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[3].q ),

    .qs     ()
  );

  // Subregister 4 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_4_we),
    .wd     (end_addr_sub_high_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[4].q ),

    .qs     ()
  );

  // Subregister 5 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_5_we),
    .wd     (end_addr_sub_high_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[5].q ),

    .qs     ()
  );

  // Subregister 6 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_6_we),
    .wd     (end_addr_sub_high_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[6].q ),

    .qs     ()
  );

  // Subregister 7 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_7_we),
    .wd     (end_addr_sub_high_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[7].q ),

    .qs     ()
  );

  // Subregister 8 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_8_we),
    .wd     (end_addr_sub_high_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[8].q ),

    .qs     ()
  );

  // Subregister 9 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_9_we),
    .wd     (end_addr_sub_high_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[9].q ),

    .qs     ()
  );

  // Subregister 10 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_10_we),
    .wd     (end_addr_sub_high_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[10].q ),

    .qs     ()
  );

  // Subregister 11 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_11_we),
    .wd     (end_addr_sub_high_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[11].q ),

    .qs     ()
  );

  // Subregister 12 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_12_we),
    .wd     (end_addr_sub_high_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[12].q ),

    .qs     ()
  );

  // Subregister 13 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_13_we),
    .wd     (end_addr_sub_high_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[13].q ),

    .qs     ()
  );

  // Subregister 14 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_14_we),
    .wd     (end_addr_sub_high_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[14].q ),

    .qs     ()
  );

  // Subregister 15 of Multireg end_addr_sub_high
  // R[end_addr_sub_high_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_end_addr_sub_high_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (end_addr_sub_high_15_we),
    .wd     (end_addr_sub_high_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.end_addr_sub_high[15].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg write_budget
  // R[write_budget_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_0_we),
    .wd     (write_budget_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg write_budget
  // R[write_budget_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_1_we),
    .wd     (write_budget_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg write_budget
  // R[write_budget_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_2_we),
    .wd     (write_budget_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg write_budget
  // R[write_budget_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_3_we),
    .wd     (write_budget_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[3].q ),

    .qs     ()
  );

  // Subregister 4 of Multireg write_budget
  // R[write_budget_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_4_we),
    .wd     (write_budget_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[4].q ),

    .qs     ()
  );

  // Subregister 5 of Multireg write_budget
  // R[write_budget_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_5_we),
    .wd     (write_budget_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[5].q ),

    .qs     ()
  );

  // Subregister 6 of Multireg write_budget
  // R[write_budget_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_6_we),
    .wd     (write_budget_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[6].q ),

    .qs     ()
  );

  // Subregister 7 of Multireg write_budget
  // R[write_budget_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_7_we),
    .wd     (write_budget_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[7].q ),

    .qs     ()
  );

  // Subregister 8 of Multireg write_budget
  // R[write_budget_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_8_we),
    .wd     (write_budget_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[8].q ),

    .qs     ()
  );

  // Subregister 9 of Multireg write_budget
  // R[write_budget_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_9_we),
    .wd     (write_budget_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[9].q ),

    .qs     ()
  );

  // Subregister 10 of Multireg write_budget
  // R[write_budget_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_10_we),
    .wd     (write_budget_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[10].q ),

    .qs     ()
  );

  // Subregister 11 of Multireg write_budget
  // R[write_budget_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_11_we),
    .wd     (write_budget_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[11].q ),

    .qs     ()
  );

  // Subregister 12 of Multireg write_budget
  // R[write_budget_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_12_we),
    .wd     (write_budget_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[12].q ),

    .qs     ()
  );

  // Subregister 13 of Multireg write_budget
  // R[write_budget_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_13_we),
    .wd     (write_budget_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[13].q ),

    .qs     ()
  );

  // Subregister 14 of Multireg write_budget
  // R[write_budget_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_14_we),
    .wd     (write_budget_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[14].q ),

    .qs     ()
  );

  // Subregister 15 of Multireg write_budget
  // R[write_budget_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_budget_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_budget_15_we),
    .wd     (write_budget_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_budget[15].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg read_budget
  // R[read_budget_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_0_we),
    .wd     (read_budget_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg read_budget
  // R[read_budget_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_1_we),
    .wd     (read_budget_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg read_budget
  // R[read_budget_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_2_we),
    .wd     (read_budget_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg read_budget
  // R[read_budget_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_3_we),
    .wd     (read_budget_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[3].q ),

    .qs     ()
  );

  // Subregister 4 of Multireg read_budget
  // R[read_budget_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_4_we),
    .wd     (read_budget_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[4].q ),

    .qs     ()
  );

  // Subregister 5 of Multireg read_budget
  // R[read_budget_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_5_we),
    .wd     (read_budget_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[5].q ),

    .qs     ()
  );

  // Subregister 6 of Multireg read_budget
  // R[read_budget_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_6_we),
    .wd     (read_budget_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[6].q ),

    .qs     ()
  );

  // Subregister 7 of Multireg read_budget
  // R[read_budget_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_7_we),
    .wd     (read_budget_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[7].q ),

    .qs     ()
  );

  // Subregister 8 of Multireg read_budget
  // R[read_budget_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_8_we),
    .wd     (read_budget_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[8].q ),

    .qs     ()
  );

  // Subregister 9 of Multireg read_budget
  // R[read_budget_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_9_we),
    .wd     (read_budget_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[9].q ),

    .qs     ()
  );

  // Subregister 10 of Multireg read_budget
  // R[read_budget_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_10_we),
    .wd     (read_budget_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[10].q ),

    .qs     ()
  );

  // Subregister 11 of Multireg read_budget
  // R[read_budget_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_11_we),
    .wd     (read_budget_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[11].q ),

    .qs     ()
  );

  // Subregister 12 of Multireg read_budget
  // R[read_budget_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_12_we),
    .wd     (read_budget_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[12].q ),

    .qs     ()
  );

  // Subregister 13 of Multireg read_budget
  // R[read_budget_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_13_we),
    .wd     (read_budget_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[13].q ),

    .qs     ()
  );

  // Subregister 14 of Multireg read_budget
  // R[read_budget_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_14_we),
    .wd     (read_budget_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[14].q ),

    .qs     ()
  );

  // Subregister 15 of Multireg read_budget
  // R[read_budget_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_budget_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_budget_15_we),
    .wd     (read_budget_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_budget[15].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg write_period
  // R[write_period_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_0_we),
    .wd     (write_period_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg write_period
  // R[write_period_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_1_we),
    .wd     (write_period_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg write_period
  // R[write_period_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_2_we),
    .wd     (write_period_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg write_period
  // R[write_period_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_3_we),
    .wd     (write_period_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[3].q ),

    .qs     ()
  );

  // Subregister 4 of Multireg write_period
  // R[write_period_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_4_we),
    .wd     (write_period_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[4].q ),

    .qs     ()
  );

  // Subregister 5 of Multireg write_period
  // R[write_period_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_5_we),
    .wd     (write_period_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[5].q ),

    .qs     ()
  );

  // Subregister 6 of Multireg write_period
  // R[write_period_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_6_we),
    .wd     (write_period_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[6].q ),

    .qs     ()
  );

  // Subregister 7 of Multireg write_period
  // R[write_period_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_7_we),
    .wd     (write_period_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[7].q ),

    .qs     ()
  );

  // Subregister 8 of Multireg write_period
  // R[write_period_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_8_we),
    .wd     (write_period_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[8].q ),

    .qs     ()
  );

  // Subregister 9 of Multireg write_period
  // R[write_period_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_9_we),
    .wd     (write_period_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[9].q ),

    .qs     ()
  );

  // Subregister 10 of Multireg write_period
  // R[write_period_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_10_we),
    .wd     (write_period_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[10].q ),

    .qs     ()
  );

  // Subregister 11 of Multireg write_period
  // R[write_period_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_11_we),
    .wd     (write_period_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[11].q ),

    .qs     ()
  );

  // Subregister 12 of Multireg write_period
  // R[write_period_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_12_we),
    .wd     (write_period_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[12].q ),

    .qs     ()
  );

  // Subregister 13 of Multireg write_period
  // R[write_period_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_13_we),
    .wd     (write_period_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[13].q ),

    .qs     ()
  );

  // Subregister 14 of Multireg write_period
  // R[write_period_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_14_we),
    .wd     (write_period_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[14].q ),

    .qs     ()
  );

  // Subregister 15 of Multireg write_period
  // R[write_period_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_write_period_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_period_15_we),
    .wd     (write_period_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write_period[15].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg read_period
  // R[read_period_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_0_we),
    .wd     (read_period_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg read_period
  // R[read_period_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_1_we),
    .wd     (read_period_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg read_period
  // R[read_period_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_2_we),
    .wd     (read_period_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg read_period
  // R[read_period_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_3_we),
    .wd     (read_period_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[3].q ),

    .qs     ()
  );

  // Subregister 4 of Multireg read_period
  // R[read_period_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_4_we),
    .wd     (read_period_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[4].q ),

    .qs     ()
  );

  // Subregister 5 of Multireg read_period
  // R[read_period_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_5_we),
    .wd     (read_period_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[5].q ),

    .qs     ()
  );

  // Subregister 6 of Multireg read_period
  // R[read_period_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_6_we),
    .wd     (read_period_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[6].q ),

    .qs     ()
  );

  // Subregister 7 of Multireg read_period
  // R[read_period_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_7_we),
    .wd     (read_period_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[7].q ),

    .qs     ()
  );

  // Subregister 8 of Multireg read_period
  // R[read_period_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_8_we),
    .wd     (read_period_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[8].q ),

    .qs     ()
  );

  // Subregister 9 of Multireg read_period
  // R[read_period_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_9_we),
    .wd     (read_period_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[9].q ),

    .qs     ()
  );

  // Subregister 10 of Multireg read_period
  // R[read_period_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_10_we),
    .wd     (read_period_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[10].q ),

    .qs     ()
  );

  // Subregister 11 of Multireg read_period
  // R[read_period_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_11_we),
    .wd     (read_period_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[11].q ),

    .qs     ()
  );

  // Subregister 12 of Multireg read_period
  // R[read_period_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_12_we),
    .wd     (read_period_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[12].q ),

    .qs     ()
  );

  // Subregister 13 of Multireg read_period
  // R[read_period_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_13_we),
    .wd     (read_period_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[13].q ),

    .qs     ()
  );

  // Subregister 14 of Multireg read_period
  // R[read_period_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_14_we),
    .wd     (read_period_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[14].q ),

    .qs     ()
  );

  // Subregister 15 of Multireg read_period
  // R[read_period_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_read_period_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_period_15_we),
    .wd     (read_period_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read_period[15].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg write_budget_left
  // R[write_budget_left_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_0 (
    .re     (write_budget_left_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_0_qs)
  );

  // Subregister 1 of Multireg write_budget_left
  // R[write_budget_left_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_1 (
    .re     (write_budget_left_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_1_qs)
  );

  // Subregister 2 of Multireg write_budget_left
  // R[write_budget_left_2]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_2 (
    .re     (write_budget_left_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_2_qs)
  );

  // Subregister 3 of Multireg write_budget_left
  // R[write_budget_left_3]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_3 (
    .re     (write_budget_left_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_3_qs)
  );

  // Subregister 4 of Multireg write_budget_left
  // R[write_budget_left_4]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_4 (
    .re     (write_budget_left_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_4_qs)
  );

  // Subregister 5 of Multireg write_budget_left
  // R[write_budget_left_5]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_5 (
    .re     (write_budget_left_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_5_qs)
  );

  // Subregister 6 of Multireg write_budget_left
  // R[write_budget_left_6]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_6 (
    .re     (write_budget_left_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_6_qs)
  );

  // Subregister 7 of Multireg write_budget_left
  // R[write_budget_left_7]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_7 (
    .re     (write_budget_left_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_7_qs)
  );

  // Subregister 8 of Multireg write_budget_left
  // R[write_budget_left_8]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_8 (
    .re     (write_budget_left_8_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[8].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_8_qs)
  );

  // Subregister 9 of Multireg write_budget_left
  // R[write_budget_left_9]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_9 (
    .re     (write_budget_left_9_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[9].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_9_qs)
  );

  // Subregister 10 of Multireg write_budget_left
  // R[write_budget_left_10]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_10 (
    .re     (write_budget_left_10_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[10].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_10_qs)
  );

  // Subregister 11 of Multireg write_budget_left
  // R[write_budget_left_11]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_11 (
    .re     (write_budget_left_11_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[11].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_11_qs)
  );

  // Subregister 12 of Multireg write_budget_left
  // R[write_budget_left_12]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_12 (
    .re     (write_budget_left_12_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[12].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_12_qs)
  );

  // Subregister 13 of Multireg write_budget_left
  // R[write_budget_left_13]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_13 (
    .re     (write_budget_left_13_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[13].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_13_qs)
  );

  // Subregister 14 of Multireg write_budget_left
  // R[write_budget_left_14]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_14 (
    .re     (write_budget_left_14_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[14].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_14_qs)
  );

  // Subregister 15 of Multireg write_budget_left
  // R[write_budget_left_15]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_budget_left_15 (
    .re     (write_budget_left_15_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_budget_left[15].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_budget_left_15_qs)
  );



  // Subregister 0 of Multireg read_budget_left
  // R[read_budget_left_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_0 (
    .re     (read_budget_left_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_0_qs)
  );

  // Subregister 1 of Multireg read_budget_left
  // R[read_budget_left_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_1 (
    .re     (read_budget_left_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_1_qs)
  );

  // Subregister 2 of Multireg read_budget_left
  // R[read_budget_left_2]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_2 (
    .re     (read_budget_left_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_2_qs)
  );

  // Subregister 3 of Multireg read_budget_left
  // R[read_budget_left_3]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_3 (
    .re     (read_budget_left_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_3_qs)
  );

  // Subregister 4 of Multireg read_budget_left
  // R[read_budget_left_4]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_4 (
    .re     (read_budget_left_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_4_qs)
  );

  // Subregister 5 of Multireg read_budget_left
  // R[read_budget_left_5]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_5 (
    .re     (read_budget_left_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_5_qs)
  );

  // Subregister 6 of Multireg read_budget_left
  // R[read_budget_left_6]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_6 (
    .re     (read_budget_left_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_6_qs)
  );

  // Subregister 7 of Multireg read_budget_left
  // R[read_budget_left_7]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_7 (
    .re     (read_budget_left_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_7_qs)
  );

  // Subregister 8 of Multireg read_budget_left
  // R[read_budget_left_8]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_8 (
    .re     (read_budget_left_8_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[8].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_8_qs)
  );

  // Subregister 9 of Multireg read_budget_left
  // R[read_budget_left_9]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_9 (
    .re     (read_budget_left_9_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[9].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_9_qs)
  );

  // Subregister 10 of Multireg read_budget_left
  // R[read_budget_left_10]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_10 (
    .re     (read_budget_left_10_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[10].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_10_qs)
  );

  // Subregister 11 of Multireg read_budget_left
  // R[read_budget_left_11]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_11 (
    .re     (read_budget_left_11_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[11].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_11_qs)
  );

  // Subregister 12 of Multireg read_budget_left
  // R[read_budget_left_12]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_12 (
    .re     (read_budget_left_12_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[12].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_12_qs)
  );

  // Subregister 13 of Multireg read_budget_left
  // R[read_budget_left_13]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_13 (
    .re     (read_budget_left_13_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[13].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_13_qs)
  );

  // Subregister 14 of Multireg read_budget_left
  // R[read_budget_left_14]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_14 (
    .re     (read_budget_left_14_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[14].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_14_qs)
  );

  // Subregister 15 of Multireg read_budget_left
  // R[read_budget_left_15]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_budget_left_15 (
    .re     (read_budget_left_15_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_budget_left[15].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_budget_left_15_qs)
  );



  // Subregister 0 of Multireg write_period_left
  // R[write_period_left_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_0 (
    .re     (write_period_left_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_0_qs)
  );

  // Subregister 1 of Multireg write_period_left
  // R[write_period_left_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_1 (
    .re     (write_period_left_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_1_qs)
  );

  // Subregister 2 of Multireg write_period_left
  // R[write_period_left_2]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_2 (
    .re     (write_period_left_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_2_qs)
  );

  // Subregister 3 of Multireg write_period_left
  // R[write_period_left_3]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_3 (
    .re     (write_period_left_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_3_qs)
  );

  // Subregister 4 of Multireg write_period_left
  // R[write_period_left_4]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_4 (
    .re     (write_period_left_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_4_qs)
  );

  // Subregister 5 of Multireg write_period_left
  // R[write_period_left_5]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_5 (
    .re     (write_period_left_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_5_qs)
  );

  // Subregister 6 of Multireg write_period_left
  // R[write_period_left_6]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_6 (
    .re     (write_period_left_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_6_qs)
  );

  // Subregister 7 of Multireg write_period_left
  // R[write_period_left_7]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_7 (
    .re     (write_period_left_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_7_qs)
  );

  // Subregister 8 of Multireg write_period_left
  // R[write_period_left_8]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_8 (
    .re     (write_period_left_8_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[8].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_8_qs)
  );

  // Subregister 9 of Multireg write_period_left
  // R[write_period_left_9]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_9 (
    .re     (write_period_left_9_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[9].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_9_qs)
  );

  // Subregister 10 of Multireg write_period_left
  // R[write_period_left_10]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_10 (
    .re     (write_period_left_10_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[10].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_10_qs)
  );

  // Subregister 11 of Multireg write_period_left
  // R[write_period_left_11]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_11 (
    .re     (write_period_left_11_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[11].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_11_qs)
  );

  // Subregister 12 of Multireg write_period_left
  // R[write_period_left_12]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_12 (
    .re     (write_period_left_12_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[12].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_12_qs)
  );

  // Subregister 13 of Multireg write_period_left
  // R[write_period_left_13]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_13 (
    .re     (write_period_left_13_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[13].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_13_qs)
  );

  // Subregister 14 of Multireg write_period_left
  // R[write_period_left_14]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_14 (
    .re     (write_period_left_14_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[14].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_14_qs)
  );

  // Subregister 15 of Multireg write_period_left
  // R[write_period_left_15]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_write_period_left_15 (
    .re     (write_period_left_15_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.write_period_left[15].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (write_period_left_15_qs)
  );



  // Subregister 0 of Multireg read_period_left
  // R[read_period_left_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_0 (
    .re     (read_period_left_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_0_qs)
  );

  // Subregister 1 of Multireg read_period_left
  // R[read_period_left_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_1 (
    .re     (read_period_left_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_1_qs)
  );

  // Subregister 2 of Multireg read_period_left
  // R[read_period_left_2]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_2 (
    .re     (read_period_left_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_2_qs)
  );

  // Subregister 3 of Multireg read_period_left
  // R[read_period_left_3]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_3 (
    .re     (read_period_left_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_3_qs)
  );

  // Subregister 4 of Multireg read_period_left
  // R[read_period_left_4]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_4 (
    .re     (read_period_left_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_4_qs)
  );

  // Subregister 5 of Multireg read_period_left
  // R[read_period_left_5]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_5 (
    .re     (read_period_left_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_5_qs)
  );

  // Subregister 6 of Multireg read_period_left
  // R[read_period_left_6]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_6 (
    .re     (read_period_left_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_6_qs)
  );

  // Subregister 7 of Multireg read_period_left
  // R[read_period_left_7]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_7 (
    .re     (read_period_left_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_7_qs)
  );

  // Subregister 8 of Multireg read_period_left
  // R[read_period_left_8]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_8 (
    .re     (read_period_left_8_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[8].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_8_qs)
  );

  // Subregister 9 of Multireg read_period_left
  // R[read_period_left_9]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_9 (
    .re     (read_period_left_9_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[9].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_9_qs)
  );

  // Subregister 10 of Multireg read_period_left
  // R[read_period_left_10]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_10 (
    .re     (read_period_left_10_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[10].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_10_qs)
  );

  // Subregister 11 of Multireg read_period_left
  // R[read_period_left_11]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_11 (
    .re     (read_period_left_11_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[11].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_11_qs)
  );

  // Subregister 12 of Multireg read_period_left
  // R[read_period_left_12]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_12 (
    .re     (read_period_left_12_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[12].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_12_qs)
  );

  // Subregister 13 of Multireg read_period_left
  // R[read_period_left_13]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_13 (
    .re     (read_period_left_13_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[13].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_13_qs)
  );

  // Subregister 14 of Multireg read_period_left
  // R[read_period_left_14]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_14 (
    .re     (read_period_left_14_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[14].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_14_qs)
  );

  // Subregister 15 of Multireg read_period_left
  // R[read_period_left_15]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_read_period_left_15 (
    .re     (read_period_left_15_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.read_period_left[15].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (read_period_left_15_qs)
  );



  // Subregister 0 of Multireg isolate
  // R[isolate]: V(True)

  // F[isolate_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolate_isolate_0 (
    .re     (isolate_isolate_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolate[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolate_isolate_0_qs)
  );


  // F[isolate_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolate_isolate_1 (
    .re     (isolate_isolate_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolate[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolate_isolate_1_qs)
  );


  // F[isolate_2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolate_isolate_2 (
    .re     (isolate_isolate_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolate[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolate_isolate_2_qs)
  );


  // F[isolate_3]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolate_isolate_3 (
    .re     (isolate_isolate_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolate[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolate_isolate_3_qs)
  );


  // F[isolate_4]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolate_isolate_4 (
    .re     (isolate_isolate_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolate[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolate_isolate_4_qs)
  );


  // F[isolate_5]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolate_isolate_5 (
    .re     (isolate_isolate_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolate[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolate_isolate_5_qs)
  );


  // F[isolate_6]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolate_isolate_6 (
    .re     (isolate_isolate_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolate[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolate_isolate_6_qs)
  );


  // F[isolate_7]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolate_isolate_7 (
    .re     (isolate_isolate_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolate[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolate_isolate_7_qs)
  );




  // Subregister 0 of Multireg isolated
  // R[isolated]: V(True)

  // F[isolated_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_isolated_0 (
    .re     (isolated_isolated_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_isolated_0_qs)
  );


  // F[isolated_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_isolated_1 (
    .re     (isolated_isolated_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_isolated_1_qs)
  );


  // F[isolated_2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_isolated_2 (
    .re     (isolated_isolated_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_isolated_2_qs)
  );


  // F[isolated_3]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_isolated_3 (
    .re     (isolated_isolated_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_isolated_3_qs)
  );


  // F[isolated_4]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_isolated_4 (
    .re     (isolated_isolated_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_isolated_4_qs)
  );


  // F[isolated_5]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_isolated_5 (
    .re     (isolated_isolated_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_isolated_5_qs)
  );


  // F[isolated_6]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_isolated_6 (
    .re     (isolated_isolated_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_isolated_6_qs)
  );


  // F[isolated_7]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_isolated_7 (
    .re     (isolated_isolated_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_isolated_7_qs)
  );



  // R[num_managers]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_num_managers (
    .re     (num_managers_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.num_managers.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (num_managers_qs)
  );


  // R[addr_width]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_addr_width (
    .re     (addr_width_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.addr_width.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (addr_width_qs)
  );


  // R[data_width]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_data_width (
    .re     (data_width_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.data_width.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (data_width_qs)
  );


  // R[id_width]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_id_width (
    .re     (id_width_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.id_width.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (id_width_qs)
  );


  // R[user_width]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_user_width (
    .re     (user_width_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.user_width.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (user_width_qs)
  );


  // R[num_pending]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_num_pending (
    .re     (num_pending_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.num_pending.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (num_pending_qs)
  );


  // R[w_buffer_depth]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_w_buffer_depth (
    .re     (w_buffer_depth_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.w_buffer_depth.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (w_buffer_depth_qs)
  );


  // R[num_addr_regions]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_num_addr_regions (
    .re     (num_addr_regions_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.num_addr_regions.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (num_addr_regions_qs)
  );


  // R[period_width]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_period_width (
    .re     (period_width_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.period_width.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (period_width_qs)
  );


  // R[budget_width]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_budget_width (
    .re     (budget_width_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.budget_width.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (budget_width_qs)
  );


  // R[max_num_managers]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h8)
  ) u_max_num_managers (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.max_num_managers.q ),

    // to register interface (read)
    .qs     (max_num_managers_qs)
  );




  logic [213:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[  0] = (reg_addr == AXI_RT_MAJOR_VERSION_OFFSET);
    addr_hit[  1] = (reg_addr == AXI_RT_MINOR_VERSION_OFFSET);
    addr_hit[  2] = (reg_addr == AXI_RT_PATCH_VERSION_OFFSET);
    addr_hit[  3] = (reg_addr == AXI_RT_RT_ENABLE_OFFSET);
    addr_hit[  4] = (reg_addr == AXI_RT_RT_BYPASSED_OFFSET);
    addr_hit[  5] = (reg_addr == AXI_RT_LEN_LIMIT_0_OFFSET);
    addr_hit[  6] = (reg_addr == AXI_RT_LEN_LIMIT_1_OFFSET);
    addr_hit[  7] = (reg_addr == AXI_RT_IMTU_ENABLE_OFFSET);
    addr_hit[  8] = (reg_addr == AXI_RT_IMTU_ABORT_OFFSET);
    addr_hit[  9] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_0_OFFSET);
    addr_hit[ 10] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_1_OFFSET);
    addr_hit[ 11] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_2_OFFSET);
    addr_hit[ 12] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_3_OFFSET);
    addr_hit[ 13] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_4_OFFSET);
    addr_hit[ 14] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_5_OFFSET);
    addr_hit[ 15] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_6_OFFSET);
    addr_hit[ 16] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_7_OFFSET);
    addr_hit[ 17] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_8_OFFSET);
    addr_hit[ 18] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_9_OFFSET);
    addr_hit[ 19] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_10_OFFSET);
    addr_hit[ 20] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_11_OFFSET);
    addr_hit[ 21] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_12_OFFSET);
    addr_hit[ 22] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_13_OFFSET);
    addr_hit[ 23] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_14_OFFSET);
    addr_hit[ 24] = (reg_addr == AXI_RT_START_ADDR_SUB_LOW_15_OFFSET);
    addr_hit[ 25] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_0_OFFSET);
    addr_hit[ 26] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_1_OFFSET);
    addr_hit[ 27] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_2_OFFSET);
    addr_hit[ 28] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_3_OFFSET);
    addr_hit[ 29] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_4_OFFSET);
    addr_hit[ 30] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_5_OFFSET);
    addr_hit[ 31] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_6_OFFSET);
    addr_hit[ 32] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_7_OFFSET);
    addr_hit[ 33] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_8_OFFSET);
    addr_hit[ 34] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_9_OFFSET);
    addr_hit[ 35] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_10_OFFSET);
    addr_hit[ 36] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_11_OFFSET);
    addr_hit[ 37] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_12_OFFSET);
    addr_hit[ 38] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_13_OFFSET);
    addr_hit[ 39] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_14_OFFSET);
    addr_hit[ 40] = (reg_addr == AXI_RT_START_ADDR_SUB_HIGH_15_OFFSET);
    addr_hit[ 41] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_0_OFFSET);
    addr_hit[ 42] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_1_OFFSET);
    addr_hit[ 43] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_2_OFFSET);
    addr_hit[ 44] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_3_OFFSET);
    addr_hit[ 45] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_4_OFFSET);
    addr_hit[ 46] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_5_OFFSET);
    addr_hit[ 47] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_6_OFFSET);
    addr_hit[ 48] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_7_OFFSET);
    addr_hit[ 49] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_8_OFFSET);
    addr_hit[ 50] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_9_OFFSET);
    addr_hit[ 51] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_10_OFFSET);
    addr_hit[ 52] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_11_OFFSET);
    addr_hit[ 53] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_12_OFFSET);
    addr_hit[ 54] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_13_OFFSET);
    addr_hit[ 55] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_14_OFFSET);
    addr_hit[ 56] = (reg_addr == AXI_RT_END_ADDR_SUB_LOW_15_OFFSET);
    addr_hit[ 57] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_0_OFFSET);
    addr_hit[ 58] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_1_OFFSET);
    addr_hit[ 59] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_2_OFFSET);
    addr_hit[ 60] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_3_OFFSET);
    addr_hit[ 61] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_4_OFFSET);
    addr_hit[ 62] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_5_OFFSET);
    addr_hit[ 63] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_6_OFFSET);
    addr_hit[ 64] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_7_OFFSET);
    addr_hit[ 65] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_8_OFFSET);
    addr_hit[ 66] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_9_OFFSET);
    addr_hit[ 67] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_10_OFFSET);
    addr_hit[ 68] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_11_OFFSET);
    addr_hit[ 69] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_12_OFFSET);
    addr_hit[ 70] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_13_OFFSET);
    addr_hit[ 71] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_14_OFFSET);
    addr_hit[ 72] = (reg_addr == AXI_RT_END_ADDR_SUB_HIGH_15_OFFSET);
    addr_hit[ 73] = (reg_addr == AXI_RT_WRITE_BUDGET_0_OFFSET);
    addr_hit[ 74] = (reg_addr == AXI_RT_WRITE_BUDGET_1_OFFSET);
    addr_hit[ 75] = (reg_addr == AXI_RT_WRITE_BUDGET_2_OFFSET);
    addr_hit[ 76] = (reg_addr == AXI_RT_WRITE_BUDGET_3_OFFSET);
    addr_hit[ 77] = (reg_addr == AXI_RT_WRITE_BUDGET_4_OFFSET);
    addr_hit[ 78] = (reg_addr == AXI_RT_WRITE_BUDGET_5_OFFSET);
    addr_hit[ 79] = (reg_addr == AXI_RT_WRITE_BUDGET_6_OFFSET);
    addr_hit[ 80] = (reg_addr == AXI_RT_WRITE_BUDGET_7_OFFSET);
    addr_hit[ 81] = (reg_addr == AXI_RT_WRITE_BUDGET_8_OFFSET);
    addr_hit[ 82] = (reg_addr == AXI_RT_WRITE_BUDGET_9_OFFSET);
    addr_hit[ 83] = (reg_addr == AXI_RT_WRITE_BUDGET_10_OFFSET);
    addr_hit[ 84] = (reg_addr == AXI_RT_WRITE_BUDGET_11_OFFSET);
    addr_hit[ 85] = (reg_addr == AXI_RT_WRITE_BUDGET_12_OFFSET);
    addr_hit[ 86] = (reg_addr == AXI_RT_WRITE_BUDGET_13_OFFSET);
    addr_hit[ 87] = (reg_addr == AXI_RT_WRITE_BUDGET_14_OFFSET);
    addr_hit[ 88] = (reg_addr == AXI_RT_WRITE_BUDGET_15_OFFSET);
    addr_hit[ 89] = (reg_addr == AXI_RT_READ_BUDGET_0_OFFSET);
    addr_hit[ 90] = (reg_addr == AXI_RT_READ_BUDGET_1_OFFSET);
    addr_hit[ 91] = (reg_addr == AXI_RT_READ_BUDGET_2_OFFSET);
    addr_hit[ 92] = (reg_addr == AXI_RT_READ_BUDGET_3_OFFSET);
    addr_hit[ 93] = (reg_addr == AXI_RT_READ_BUDGET_4_OFFSET);
    addr_hit[ 94] = (reg_addr == AXI_RT_READ_BUDGET_5_OFFSET);
    addr_hit[ 95] = (reg_addr == AXI_RT_READ_BUDGET_6_OFFSET);
    addr_hit[ 96] = (reg_addr == AXI_RT_READ_BUDGET_7_OFFSET);
    addr_hit[ 97] = (reg_addr == AXI_RT_READ_BUDGET_8_OFFSET);
    addr_hit[ 98] = (reg_addr == AXI_RT_READ_BUDGET_9_OFFSET);
    addr_hit[ 99] = (reg_addr == AXI_RT_READ_BUDGET_10_OFFSET);
    addr_hit[100] = (reg_addr == AXI_RT_READ_BUDGET_11_OFFSET);
    addr_hit[101] = (reg_addr == AXI_RT_READ_BUDGET_12_OFFSET);
    addr_hit[102] = (reg_addr == AXI_RT_READ_BUDGET_13_OFFSET);
    addr_hit[103] = (reg_addr == AXI_RT_READ_BUDGET_14_OFFSET);
    addr_hit[104] = (reg_addr == AXI_RT_READ_BUDGET_15_OFFSET);
    addr_hit[105] = (reg_addr == AXI_RT_WRITE_PERIOD_0_OFFSET);
    addr_hit[106] = (reg_addr == AXI_RT_WRITE_PERIOD_1_OFFSET);
    addr_hit[107] = (reg_addr == AXI_RT_WRITE_PERIOD_2_OFFSET);
    addr_hit[108] = (reg_addr == AXI_RT_WRITE_PERIOD_3_OFFSET);
    addr_hit[109] = (reg_addr == AXI_RT_WRITE_PERIOD_4_OFFSET);
    addr_hit[110] = (reg_addr == AXI_RT_WRITE_PERIOD_5_OFFSET);
    addr_hit[111] = (reg_addr == AXI_RT_WRITE_PERIOD_6_OFFSET);
    addr_hit[112] = (reg_addr == AXI_RT_WRITE_PERIOD_7_OFFSET);
    addr_hit[113] = (reg_addr == AXI_RT_WRITE_PERIOD_8_OFFSET);
    addr_hit[114] = (reg_addr == AXI_RT_WRITE_PERIOD_9_OFFSET);
    addr_hit[115] = (reg_addr == AXI_RT_WRITE_PERIOD_10_OFFSET);
    addr_hit[116] = (reg_addr == AXI_RT_WRITE_PERIOD_11_OFFSET);
    addr_hit[117] = (reg_addr == AXI_RT_WRITE_PERIOD_12_OFFSET);
    addr_hit[118] = (reg_addr == AXI_RT_WRITE_PERIOD_13_OFFSET);
    addr_hit[119] = (reg_addr == AXI_RT_WRITE_PERIOD_14_OFFSET);
    addr_hit[120] = (reg_addr == AXI_RT_WRITE_PERIOD_15_OFFSET);
    addr_hit[121] = (reg_addr == AXI_RT_READ_PERIOD_0_OFFSET);
    addr_hit[122] = (reg_addr == AXI_RT_READ_PERIOD_1_OFFSET);
    addr_hit[123] = (reg_addr == AXI_RT_READ_PERIOD_2_OFFSET);
    addr_hit[124] = (reg_addr == AXI_RT_READ_PERIOD_3_OFFSET);
    addr_hit[125] = (reg_addr == AXI_RT_READ_PERIOD_4_OFFSET);
    addr_hit[126] = (reg_addr == AXI_RT_READ_PERIOD_5_OFFSET);
    addr_hit[127] = (reg_addr == AXI_RT_READ_PERIOD_6_OFFSET);
    addr_hit[128] = (reg_addr == AXI_RT_READ_PERIOD_7_OFFSET);
    addr_hit[129] = (reg_addr == AXI_RT_READ_PERIOD_8_OFFSET);
    addr_hit[130] = (reg_addr == AXI_RT_READ_PERIOD_9_OFFSET);
    addr_hit[131] = (reg_addr == AXI_RT_READ_PERIOD_10_OFFSET);
    addr_hit[132] = (reg_addr == AXI_RT_READ_PERIOD_11_OFFSET);
    addr_hit[133] = (reg_addr == AXI_RT_READ_PERIOD_12_OFFSET);
    addr_hit[134] = (reg_addr == AXI_RT_READ_PERIOD_13_OFFSET);
    addr_hit[135] = (reg_addr == AXI_RT_READ_PERIOD_14_OFFSET);
    addr_hit[136] = (reg_addr == AXI_RT_READ_PERIOD_15_OFFSET);
    addr_hit[137] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_0_OFFSET);
    addr_hit[138] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_1_OFFSET);
    addr_hit[139] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_2_OFFSET);
    addr_hit[140] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_3_OFFSET);
    addr_hit[141] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_4_OFFSET);
    addr_hit[142] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_5_OFFSET);
    addr_hit[143] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_6_OFFSET);
    addr_hit[144] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_7_OFFSET);
    addr_hit[145] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_8_OFFSET);
    addr_hit[146] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_9_OFFSET);
    addr_hit[147] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_10_OFFSET);
    addr_hit[148] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_11_OFFSET);
    addr_hit[149] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_12_OFFSET);
    addr_hit[150] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_13_OFFSET);
    addr_hit[151] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_14_OFFSET);
    addr_hit[152] = (reg_addr == AXI_RT_WRITE_BUDGET_LEFT_15_OFFSET);
    addr_hit[153] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_0_OFFSET);
    addr_hit[154] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_1_OFFSET);
    addr_hit[155] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_2_OFFSET);
    addr_hit[156] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_3_OFFSET);
    addr_hit[157] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_4_OFFSET);
    addr_hit[158] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_5_OFFSET);
    addr_hit[159] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_6_OFFSET);
    addr_hit[160] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_7_OFFSET);
    addr_hit[161] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_8_OFFSET);
    addr_hit[162] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_9_OFFSET);
    addr_hit[163] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_10_OFFSET);
    addr_hit[164] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_11_OFFSET);
    addr_hit[165] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_12_OFFSET);
    addr_hit[166] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_13_OFFSET);
    addr_hit[167] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_14_OFFSET);
    addr_hit[168] = (reg_addr == AXI_RT_READ_BUDGET_LEFT_15_OFFSET);
    addr_hit[169] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_0_OFFSET);
    addr_hit[170] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_1_OFFSET);
    addr_hit[171] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_2_OFFSET);
    addr_hit[172] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_3_OFFSET);
    addr_hit[173] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_4_OFFSET);
    addr_hit[174] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_5_OFFSET);
    addr_hit[175] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_6_OFFSET);
    addr_hit[176] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_7_OFFSET);
    addr_hit[177] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_8_OFFSET);
    addr_hit[178] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_9_OFFSET);
    addr_hit[179] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_10_OFFSET);
    addr_hit[180] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_11_OFFSET);
    addr_hit[181] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_12_OFFSET);
    addr_hit[182] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_13_OFFSET);
    addr_hit[183] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_14_OFFSET);
    addr_hit[184] = (reg_addr == AXI_RT_WRITE_PERIOD_LEFT_15_OFFSET);
    addr_hit[185] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_0_OFFSET);
    addr_hit[186] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_1_OFFSET);
    addr_hit[187] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_2_OFFSET);
    addr_hit[188] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_3_OFFSET);
    addr_hit[189] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_4_OFFSET);
    addr_hit[190] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_5_OFFSET);
    addr_hit[191] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_6_OFFSET);
    addr_hit[192] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_7_OFFSET);
    addr_hit[193] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_8_OFFSET);
    addr_hit[194] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_9_OFFSET);
    addr_hit[195] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_10_OFFSET);
    addr_hit[196] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_11_OFFSET);
    addr_hit[197] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_12_OFFSET);
    addr_hit[198] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_13_OFFSET);
    addr_hit[199] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_14_OFFSET);
    addr_hit[200] = (reg_addr == AXI_RT_READ_PERIOD_LEFT_15_OFFSET);
    addr_hit[201] = (reg_addr == AXI_RT_ISOLATE_OFFSET);
    addr_hit[202] = (reg_addr == AXI_RT_ISOLATED_OFFSET);
    addr_hit[203] = (reg_addr == AXI_RT_NUM_MANAGERS_OFFSET);
    addr_hit[204] = (reg_addr == AXI_RT_ADDR_WIDTH_OFFSET);
    addr_hit[205] = (reg_addr == AXI_RT_DATA_WIDTH_OFFSET);
    addr_hit[206] = (reg_addr == AXI_RT_ID_WIDTH_OFFSET);
    addr_hit[207] = (reg_addr == AXI_RT_USER_WIDTH_OFFSET);
    addr_hit[208] = (reg_addr == AXI_RT_NUM_PENDING_OFFSET);
    addr_hit[209] = (reg_addr == AXI_RT_W_BUFFER_DEPTH_OFFSET);
    addr_hit[210] = (reg_addr == AXI_RT_NUM_ADDR_REGIONS_OFFSET);
    addr_hit[211] = (reg_addr == AXI_RT_PERIOD_WIDTH_OFFSET);
    addr_hit[212] = (reg_addr == AXI_RT_BUDGET_WIDTH_OFFSET);
    addr_hit[213] = (reg_addr == AXI_RT_MAX_NUM_MANAGERS_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[  0] & (|(AXI_RT_PERMIT[  0] & ~reg_be))) |
               (addr_hit[  1] & (|(AXI_RT_PERMIT[  1] & ~reg_be))) |
               (addr_hit[  2] & (|(AXI_RT_PERMIT[  2] & ~reg_be))) |
               (addr_hit[  3] & (|(AXI_RT_PERMIT[  3] & ~reg_be))) |
               (addr_hit[  4] & (|(AXI_RT_PERMIT[  4] & ~reg_be))) |
               (addr_hit[  5] & (|(AXI_RT_PERMIT[  5] & ~reg_be))) |
               (addr_hit[  6] & (|(AXI_RT_PERMIT[  6] & ~reg_be))) |
               (addr_hit[  7] & (|(AXI_RT_PERMIT[  7] & ~reg_be))) |
               (addr_hit[  8] & (|(AXI_RT_PERMIT[  8] & ~reg_be))) |
               (addr_hit[  9] & (|(AXI_RT_PERMIT[  9] & ~reg_be))) |
               (addr_hit[ 10] & (|(AXI_RT_PERMIT[ 10] & ~reg_be))) |
               (addr_hit[ 11] & (|(AXI_RT_PERMIT[ 11] & ~reg_be))) |
               (addr_hit[ 12] & (|(AXI_RT_PERMIT[ 12] & ~reg_be))) |
               (addr_hit[ 13] & (|(AXI_RT_PERMIT[ 13] & ~reg_be))) |
               (addr_hit[ 14] & (|(AXI_RT_PERMIT[ 14] & ~reg_be))) |
               (addr_hit[ 15] & (|(AXI_RT_PERMIT[ 15] & ~reg_be))) |
               (addr_hit[ 16] & (|(AXI_RT_PERMIT[ 16] & ~reg_be))) |
               (addr_hit[ 17] & (|(AXI_RT_PERMIT[ 17] & ~reg_be))) |
               (addr_hit[ 18] & (|(AXI_RT_PERMIT[ 18] & ~reg_be))) |
               (addr_hit[ 19] & (|(AXI_RT_PERMIT[ 19] & ~reg_be))) |
               (addr_hit[ 20] & (|(AXI_RT_PERMIT[ 20] & ~reg_be))) |
               (addr_hit[ 21] & (|(AXI_RT_PERMIT[ 21] & ~reg_be))) |
               (addr_hit[ 22] & (|(AXI_RT_PERMIT[ 22] & ~reg_be))) |
               (addr_hit[ 23] & (|(AXI_RT_PERMIT[ 23] & ~reg_be))) |
               (addr_hit[ 24] & (|(AXI_RT_PERMIT[ 24] & ~reg_be))) |
               (addr_hit[ 25] & (|(AXI_RT_PERMIT[ 25] & ~reg_be))) |
               (addr_hit[ 26] & (|(AXI_RT_PERMIT[ 26] & ~reg_be))) |
               (addr_hit[ 27] & (|(AXI_RT_PERMIT[ 27] & ~reg_be))) |
               (addr_hit[ 28] & (|(AXI_RT_PERMIT[ 28] & ~reg_be))) |
               (addr_hit[ 29] & (|(AXI_RT_PERMIT[ 29] & ~reg_be))) |
               (addr_hit[ 30] & (|(AXI_RT_PERMIT[ 30] & ~reg_be))) |
               (addr_hit[ 31] & (|(AXI_RT_PERMIT[ 31] & ~reg_be))) |
               (addr_hit[ 32] & (|(AXI_RT_PERMIT[ 32] & ~reg_be))) |
               (addr_hit[ 33] & (|(AXI_RT_PERMIT[ 33] & ~reg_be))) |
               (addr_hit[ 34] & (|(AXI_RT_PERMIT[ 34] & ~reg_be))) |
               (addr_hit[ 35] & (|(AXI_RT_PERMIT[ 35] & ~reg_be))) |
               (addr_hit[ 36] & (|(AXI_RT_PERMIT[ 36] & ~reg_be))) |
               (addr_hit[ 37] & (|(AXI_RT_PERMIT[ 37] & ~reg_be))) |
               (addr_hit[ 38] & (|(AXI_RT_PERMIT[ 38] & ~reg_be))) |
               (addr_hit[ 39] & (|(AXI_RT_PERMIT[ 39] & ~reg_be))) |
               (addr_hit[ 40] & (|(AXI_RT_PERMIT[ 40] & ~reg_be))) |
               (addr_hit[ 41] & (|(AXI_RT_PERMIT[ 41] & ~reg_be))) |
               (addr_hit[ 42] & (|(AXI_RT_PERMIT[ 42] & ~reg_be))) |
               (addr_hit[ 43] & (|(AXI_RT_PERMIT[ 43] & ~reg_be))) |
               (addr_hit[ 44] & (|(AXI_RT_PERMIT[ 44] & ~reg_be))) |
               (addr_hit[ 45] & (|(AXI_RT_PERMIT[ 45] & ~reg_be))) |
               (addr_hit[ 46] & (|(AXI_RT_PERMIT[ 46] & ~reg_be))) |
               (addr_hit[ 47] & (|(AXI_RT_PERMIT[ 47] & ~reg_be))) |
               (addr_hit[ 48] & (|(AXI_RT_PERMIT[ 48] & ~reg_be))) |
               (addr_hit[ 49] & (|(AXI_RT_PERMIT[ 49] & ~reg_be))) |
               (addr_hit[ 50] & (|(AXI_RT_PERMIT[ 50] & ~reg_be))) |
               (addr_hit[ 51] & (|(AXI_RT_PERMIT[ 51] & ~reg_be))) |
               (addr_hit[ 52] & (|(AXI_RT_PERMIT[ 52] & ~reg_be))) |
               (addr_hit[ 53] & (|(AXI_RT_PERMIT[ 53] & ~reg_be))) |
               (addr_hit[ 54] & (|(AXI_RT_PERMIT[ 54] & ~reg_be))) |
               (addr_hit[ 55] & (|(AXI_RT_PERMIT[ 55] & ~reg_be))) |
               (addr_hit[ 56] & (|(AXI_RT_PERMIT[ 56] & ~reg_be))) |
               (addr_hit[ 57] & (|(AXI_RT_PERMIT[ 57] & ~reg_be))) |
               (addr_hit[ 58] & (|(AXI_RT_PERMIT[ 58] & ~reg_be))) |
               (addr_hit[ 59] & (|(AXI_RT_PERMIT[ 59] & ~reg_be))) |
               (addr_hit[ 60] & (|(AXI_RT_PERMIT[ 60] & ~reg_be))) |
               (addr_hit[ 61] & (|(AXI_RT_PERMIT[ 61] & ~reg_be))) |
               (addr_hit[ 62] & (|(AXI_RT_PERMIT[ 62] & ~reg_be))) |
               (addr_hit[ 63] & (|(AXI_RT_PERMIT[ 63] & ~reg_be))) |
               (addr_hit[ 64] & (|(AXI_RT_PERMIT[ 64] & ~reg_be))) |
               (addr_hit[ 65] & (|(AXI_RT_PERMIT[ 65] & ~reg_be))) |
               (addr_hit[ 66] & (|(AXI_RT_PERMIT[ 66] & ~reg_be))) |
               (addr_hit[ 67] & (|(AXI_RT_PERMIT[ 67] & ~reg_be))) |
               (addr_hit[ 68] & (|(AXI_RT_PERMIT[ 68] & ~reg_be))) |
               (addr_hit[ 69] & (|(AXI_RT_PERMIT[ 69] & ~reg_be))) |
               (addr_hit[ 70] & (|(AXI_RT_PERMIT[ 70] & ~reg_be))) |
               (addr_hit[ 71] & (|(AXI_RT_PERMIT[ 71] & ~reg_be))) |
               (addr_hit[ 72] & (|(AXI_RT_PERMIT[ 72] & ~reg_be))) |
               (addr_hit[ 73] & (|(AXI_RT_PERMIT[ 73] & ~reg_be))) |
               (addr_hit[ 74] & (|(AXI_RT_PERMIT[ 74] & ~reg_be))) |
               (addr_hit[ 75] & (|(AXI_RT_PERMIT[ 75] & ~reg_be))) |
               (addr_hit[ 76] & (|(AXI_RT_PERMIT[ 76] & ~reg_be))) |
               (addr_hit[ 77] & (|(AXI_RT_PERMIT[ 77] & ~reg_be))) |
               (addr_hit[ 78] & (|(AXI_RT_PERMIT[ 78] & ~reg_be))) |
               (addr_hit[ 79] & (|(AXI_RT_PERMIT[ 79] & ~reg_be))) |
               (addr_hit[ 80] & (|(AXI_RT_PERMIT[ 80] & ~reg_be))) |
               (addr_hit[ 81] & (|(AXI_RT_PERMIT[ 81] & ~reg_be))) |
               (addr_hit[ 82] & (|(AXI_RT_PERMIT[ 82] & ~reg_be))) |
               (addr_hit[ 83] & (|(AXI_RT_PERMIT[ 83] & ~reg_be))) |
               (addr_hit[ 84] & (|(AXI_RT_PERMIT[ 84] & ~reg_be))) |
               (addr_hit[ 85] & (|(AXI_RT_PERMIT[ 85] & ~reg_be))) |
               (addr_hit[ 86] & (|(AXI_RT_PERMIT[ 86] & ~reg_be))) |
               (addr_hit[ 87] & (|(AXI_RT_PERMIT[ 87] & ~reg_be))) |
               (addr_hit[ 88] & (|(AXI_RT_PERMIT[ 88] & ~reg_be))) |
               (addr_hit[ 89] & (|(AXI_RT_PERMIT[ 89] & ~reg_be))) |
               (addr_hit[ 90] & (|(AXI_RT_PERMIT[ 90] & ~reg_be))) |
               (addr_hit[ 91] & (|(AXI_RT_PERMIT[ 91] & ~reg_be))) |
               (addr_hit[ 92] & (|(AXI_RT_PERMIT[ 92] & ~reg_be))) |
               (addr_hit[ 93] & (|(AXI_RT_PERMIT[ 93] & ~reg_be))) |
               (addr_hit[ 94] & (|(AXI_RT_PERMIT[ 94] & ~reg_be))) |
               (addr_hit[ 95] & (|(AXI_RT_PERMIT[ 95] & ~reg_be))) |
               (addr_hit[ 96] & (|(AXI_RT_PERMIT[ 96] & ~reg_be))) |
               (addr_hit[ 97] & (|(AXI_RT_PERMIT[ 97] & ~reg_be))) |
               (addr_hit[ 98] & (|(AXI_RT_PERMIT[ 98] & ~reg_be))) |
               (addr_hit[ 99] & (|(AXI_RT_PERMIT[ 99] & ~reg_be))) |
               (addr_hit[100] & (|(AXI_RT_PERMIT[100] & ~reg_be))) |
               (addr_hit[101] & (|(AXI_RT_PERMIT[101] & ~reg_be))) |
               (addr_hit[102] & (|(AXI_RT_PERMIT[102] & ~reg_be))) |
               (addr_hit[103] & (|(AXI_RT_PERMIT[103] & ~reg_be))) |
               (addr_hit[104] & (|(AXI_RT_PERMIT[104] & ~reg_be))) |
               (addr_hit[105] & (|(AXI_RT_PERMIT[105] & ~reg_be))) |
               (addr_hit[106] & (|(AXI_RT_PERMIT[106] & ~reg_be))) |
               (addr_hit[107] & (|(AXI_RT_PERMIT[107] & ~reg_be))) |
               (addr_hit[108] & (|(AXI_RT_PERMIT[108] & ~reg_be))) |
               (addr_hit[109] & (|(AXI_RT_PERMIT[109] & ~reg_be))) |
               (addr_hit[110] & (|(AXI_RT_PERMIT[110] & ~reg_be))) |
               (addr_hit[111] & (|(AXI_RT_PERMIT[111] & ~reg_be))) |
               (addr_hit[112] & (|(AXI_RT_PERMIT[112] & ~reg_be))) |
               (addr_hit[113] & (|(AXI_RT_PERMIT[113] & ~reg_be))) |
               (addr_hit[114] & (|(AXI_RT_PERMIT[114] & ~reg_be))) |
               (addr_hit[115] & (|(AXI_RT_PERMIT[115] & ~reg_be))) |
               (addr_hit[116] & (|(AXI_RT_PERMIT[116] & ~reg_be))) |
               (addr_hit[117] & (|(AXI_RT_PERMIT[117] & ~reg_be))) |
               (addr_hit[118] & (|(AXI_RT_PERMIT[118] & ~reg_be))) |
               (addr_hit[119] & (|(AXI_RT_PERMIT[119] & ~reg_be))) |
               (addr_hit[120] & (|(AXI_RT_PERMIT[120] & ~reg_be))) |
               (addr_hit[121] & (|(AXI_RT_PERMIT[121] & ~reg_be))) |
               (addr_hit[122] & (|(AXI_RT_PERMIT[122] & ~reg_be))) |
               (addr_hit[123] & (|(AXI_RT_PERMIT[123] & ~reg_be))) |
               (addr_hit[124] & (|(AXI_RT_PERMIT[124] & ~reg_be))) |
               (addr_hit[125] & (|(AXI_RT_PERMIT[125] & ~reg_be))) |
               (addr_hit[126] & (|(AXI_RT_PERMIT[126] & ~reg_be))) |
               (addr_hit[127] & (|(AXI_RT_PERMIT[127] & ~reg_be))) |
               (addr_hit[128] & (|(AXI_RT_PERMIT[128] & ~reg_be))) |
               (addr_hit[129] & (|(AXI_RT_PERMIT[129] & ~reg_be))) |
               (addr_hit[130] & (|(AXI_RT_PERMIT[130] & ~reg_be))) |
               (addr_hit[131] & (|(AXI_RT_PERMIT[131] & ~reg_be))) |
               (addr_hit[132] & (|(AXI_RT_PERMIT[132] & ~reg_be))) |
               (addr_hit[133] & (|(AXI_RT_PERMIT[133] & ~reg_be))) |
               (addr_hit[134] & (|(AXI_RT_PERMIT[134] & ~reg_be))) |
               (addr_hit[135] & (|(AXI_RT_PERMIT[135] & ~reg_be))) |
               (addr_hit[136] & (|(AXI_RT_PERMIT[136] & ~reg_be))) |
               (addr_hit[137] & (|(AXI_RT_PERMIT[137] & ~reg_be))) |
               (addr_hit[138] & (|(AXI_RT_PERMIT[138] & ~reg_be))) |
               (addr_hit[139] & (|(AXI_RT_PERMIT[139] & ~reg_be))) |
               (addr_hit[140] & (|(AXI_RT_PERMIT[140] & ~reg_be))) |
               (addr_hit[141] & (|(AXI_RT_PERMIT[141] & ~reg_be))) |
               (addr_hit[142] & (|(AXI_RT_PERMIT[142] & ~reg_be))) |
               (addr_hit[143] & (|(AXI_RT_PERMIT[143] & ~reg_be))) |
               (addr_hit[144] & (|(AXI_RT_PERMIT[144] & ~reg_be))) |
               (addr_hit[145] & (|(AXI_RT_PERMIT[145] & ~reg_be))) |
               (addr_hit[146] & (|(AXI_RT_PERMIT[146] & ~reg_be))) |
               (addr_hit[147] & (|(AXI_RT_PERMIT[147] & ~reg_be))) |
               (addr_hit[148] & (|(AXI_RT_PERMIT[148] & ~reg_be))) |
               (addr_hit[149] & (|(AXI_RT_PERMIT[149] & ~reg_be))) |
               (addr_hit[150] & (|(AXI_RT_PERMIT[150] & ~reg_be))) |
               (addr_hit[151] & (|(AXI_RT_PERMIT[151] & ~reg_be))) |
               (addr_hit[152] & (|(AXI_RT_PERMIT[152] & ~reg_be))) |
               (addr_hit[153] & (|(AXI_RT_PERMIT[153] & ~reg_be))) |
               (addr_hit[154] & (|(AXI_RT_PERMIT[154] & ~reg_be))) |
               (addr_hit[155] & (|(AXI_RT_PERMIT[155] & ~reg_be))) |
               (addr_hit[156] & (|(AXI_RT_PERMIT[156] & ~reg_be))) |
               (addr_hit[157] & (|(AXI_RT_PERMIT[157] & ~reg_be))) |
               (addr_hit[158] & (|(AXI_RT_PERMIT[158] & ~reg_be))) |
               (addr_hit[159] & (|(AXI_RT_PERMIT[159] & ~reg_be))) |
               (addr_hit[160] & (|(AXI_RT_PERMIT[160] & ~reg_be))) |
               (addr_hit[161] & (|(AXI_RT_PERMIT[161] & ~reg_be))) |
               (addr_hit[162] & (|(AXI_RT_PERMIT[162] & ~reg_be))) |
               (addr_hit[163] & (|(AXI_RT_PERMIT[163] & ~reg_be))) |
               (addr_hit[164] & (|(AXI_RT_PERMIT[164] & ~reg_be))) |
               (addr_hit[165] & (|(AXI_RT_PERMIT[165] & ~reg_be))) |
               (addr_hit[166] & (|(AXI_RT_PERMIT[166] & ~reg_be))) |
               (addr_hit[167] & (|(AXI_RT_PERMIT[167] & ~reg_be))) |
               (addr_hit[168] & (|(AXI_RT_PERMIT[168] & ~reg_be))) |
               (addr_hit[169] & (|(AXI_RT_PERMIT[169] & ~reg_be))) |
               (addr_hit[170] & (|(AXI_RT_PERMIT[170] & ~reg_be))) |
               (addr_hit[171] & (|(AXI_RT_PERMIT[171] & ~reg_be))) |
               (addr_hit[172] & (|(AXI_RT_PERMIT[172] & ~reg_be))) |
               (addr_hit[173] & (|(AXI_RT_PERMIT[173] & ~reg_be))) |
               (addr_hit[174] & (|(AXI_RT_PERMIT[174] & ~reg_be))) |
               (addr_hit[175] & (|(AXI_RT_PERMIT[175] & ~reg_be))) |
               (addr_hit[176] & (|(AXI_RT_PERMIT[176] & ~reg_be))) |
               (addr_hit[177] & (|(AXI_RT_PERMIT[177] & ~reg_be))) |
               (addr_hit[178] & (|(AXI_RT_PERMIT[178] & ~reg_be))) |
               (addr_hit[179] & (|(AXI_RT_PERMIT[179] & ~reg_be))) |
               (addr_hit[180] & (|(AXI_RT_PERMIT[180] & ~reg_be))) |
               (addr_hit[181] & (|(AXI_RT_PERMIT[181] & ~reg_be))) |
               (addr_hit[182] & (|(AXI_RT_PERMIT[182] & ~reg_be))) |
               (addr_hit[183] & (|(AXI_RT_PERMIT[183] & ~reg_be))) |
               (addr_hit[184] & (|(AXI_RT_PERMIT[184] & ~reg_be))) |
               (addr_hit[185] & (|(AXI_RT_PERMIT[185] & ~reg_be))) |
               (addr_hit[186] & (|(AXI_RT_PERMIT[186] & ~reg_be))) |
               (addr_hit[187] & (|(AXI_RT_PERMIT[187] & ~reg_be))) |
               (addr_hit[188] & (|(AXI_RT_PERMIT[188] & ~reg_be))) |
               (addr_hit[189] & (|(AXI_RT_PERMIT[189] & ~reg_be))) |
               (addr_hit[190] & (|(AXI_RT_PERMIT[190] & ~reg_be))) |
               (addr_hit[191] & (|(AXI_RT_PERMIT[191] & ~reg_be))) |
               (addr_hit[192] & (|(AXI_RT_PERMIT[192] & ~reg_be))) |
               (addr_hit[193] & (|(AXI_RT_PERMIT[193] & ~reg_be))) |
               (addr_hit[194] & (|(AXI_RT_PERMIT[194] & ~reg_be))) |
               (addr_hit[195] & (|(AXI_RT_PERMIT[195] & ~reg_be))) |
               (addr_hit[196] & (|(AXI_RT_PERMIT[196] & ~reg_be))) |
               (addr_hit[197] & (|(AXI_RT_PERMIT[197] & ~reg_be))) |
               (addr_hit[198] & (|(AXI_RT_PERMIT[198] & ~reg_be))) |
               (addr_hit[199] & (|(AXI_RT_PERMIT[199] & ~reg_be))) |
               (addr_hit[200] & (|(AXI_RT_PERMIT[200] & ~reg_be))) |
               (addr_hit[201] & (|(AXI_RT_PERMIT[201] & ~reg_be))) |
               (addr_hit[202] & (|(AXI_RT_PERMIT[202] & ~reg_be))) |
               (addr_hit[203] & (|(AXI_RT_PERMIT[203] & ~reg_be))) |
               (addr_hit[204] & (|(AXI_RT_PERMIT[204] & ~reg_be))) |
               (addr_hit[205] & (|(AXI_RT_PERMIT[205] & ~reg_be))) |
               (addr_hit[206] & (|(AXI_RT_PERMIT[206] & ~reg_be))) |
               (addr_hit[207] & (|(AXI_RT_PERMIT[207] & ~reg_be))) |
               (addr_hit[208] & (|(AXI_RT_PERMIT[208] & ~reg_be))) |
               (addr_hit[209] & (|(AXI_RT_PERMIT[209] & ~reg_be))) |
               (addr_hit[210] & (|(AXI_RT_PERMIT[210] & ~reg_be))) |
               (addr_hit[211] & (|(AXI_RT_PERMIT[211] & ~reg_be))) |
               (addr_hit[212] & (|(AXI_RT_PERMIT[212] & ~reg_be))) |
               (addr_hit[213] & (|(AXI_RT_PERMIT[213] & ~reg_be)))));
  end

  assign rt_enable_enable_0_we = addr_hit[3] & reg_we & !reg_error;
  assign rt_enable_enable_0_wd = reg_wdata[0];

  assign rt_enable_enable_1_we = addr_hit[3] & reg_we & !reg_error;
  assign rt_enable_enable_1_wd = reg_wdata[1];

  assign rt_enable_enable_2_we = addr_hit[3] & reg_we & !reg_error;
  assign rt_enable_enable_2_wd = reg_wdata[2];

  assign rt_enable_enable_3_we = addr_hit[3] & reg_we & !reg_error;
  assign rt_enable_enable_3_wd = reg_wdata[3];

  assign rt_enable_enable_4_we = addr_hit[3] & reg_we & !reg_error;
  assign rt_enable_enable_4_wd = reg_wdata[4];

  assign rt_enable_enable_5_we = addr_hit[3] & reg_we & !reg_error;
  assign rt_enable_enable_5_wd = reg_wdata[5];

  assign rt_enable_enable_6_we = addr_hit[3] & reg_we & !reg_error;
  assign rt_enable_enable_6_wd = reg_wdata[6];

  assign rt_enable_enable_7_we = addr_hit[3] & reg_we & !reg_error;
  assign rt_enable_enable_7_wd = reg_wdata[7];

  assign rt_bypassed_bypassed_0_re = addr_hit[4] & reg_re & !reg_error;

  assign rt_bypassed_bypassed_1_re = addr_hit[4] & reg_re & !reg_error;

  assign rt_bypassed_bypassed_2_re = addr_hit[4] & reg_re & !reg_error;

  assign rt_bypassed_bypassed_3_re = addr_hit[4] & reg_re & !reg_error;

  assign rt_bypassed_bypassed_4_re = addr_hit[4] & reg_re & !reg_error;

  assign rt_bypassed_bypassed_5_re = addr_hit[4] & reg_re & !reg_error;

  assign rt_bypassed_bypassed_6_re = addr_hit[4] & reg_re & !reg_error;

  assign rt_bypassed_bypassed_7_re = addr_hit[4] & reg_re & !reg_error;

  assign len_limit_0_len_0_we = addr_hit[5] & reg_we & !reg_error;
  assign len_limit_0_len_0_wd = reg_wdata[7:0];

  assign len_limit_0_len_1_we = addr_hit[5] & reg_we & !reg_error;
  assign len_limit_0_len_1_wd = reg_wdata[15:8];

  assign len_limit_0_len_2_we = addr_hit[5] & reg_we & !reg_error;
  assign len_limit_0_len_2_wd = reg_wdata[23:16];

  assign len_limit_0_len_3_we = addr_hit[5] & reg_we & !reg_error;
  assign len_limit_0_len_3_wd = reg_wdata[31:24];

  assign len_limit_1_len_4_we = addr_hit[6] & reg_we & !reg_error;
  assign len_limit_1_len_4_wd = reg_wdata[7:0];

  assign len_limit_1_len_5_we = addr_hit[6] & reg_we & !reg_error;
  assign len_limit_1_len_5_wd = reg_wdata[15:8];

  assign len_limit_1_len_6_we = addr_hit[6] & reg_we & !reg_error;
  assign len_limit_1_len_6_wd = reg_wdata[23:16];

  assign len_limit_1_len_7_we = addr_hit[6] & reg_we & !reg_error;
  assign len_limit_1_len_7_wd = reg_wdata[31:24];

  assign imtu_enable_enable_0_we = addr_hit[7] & reg_we & !reg_error;
  assign imtu_enable_enable_0_wd = reg_wdata[0];

  assign imtu_enable_enable_1_we = addr_hit[7] & reg_we & !reg_error;
  assign imtu_enable_enable_1_wd = reg_wdata[1];

  assign imtu_enable_enable_2_we = addr_hit[7] & reg_we & !reg_error;
  assign imtu_enable_enable_2_wd = reg_wdata[2];

  assign imtu_enable_enable_3_we = addr_hit[7] & reg_we & !reg_error;
  assign imtu_enable_enable_3_wd = reg_wdata[3];

  assign imtu_enable_enable_4_we = addr_hit[7] & reg_we & !reg_error;
  assign imtu_enable_enable_4_wd = reg_wdata[4];

  assign imtu_enable_enable_5_we = addr_hit[7] & reg_we & !reg_error;
  assign imtu_enable_enable_5_wd = reg_wdata[5];

  assign imtu_enable_enable_6_we = addr_hit[7] & reg_we & !reg_error;
  assign imtu_enable_enable_6_wd = reg_wdata[6];

  assign imtu_enable_enable_7_we = addr_hit[7] & reg_we & !reg_error;
  assign imtu_enable_enable_7_wd = reg_wdata[7];

  assign imtu_abort_abort_0_we = addr_hit[8] & reg_we & !reg_error;
  assign imtu_abort_abort_0_wd = reg_wdata[0];

  assign imtu_abort_abort_1_we = addr_hit[8] & reg_we & !reg_error;
  assign imtu_abort_abort_1_wd = reg_wdata[1];

  assign imtu_abort_abort_2_we = addr_hit[8] & reg_we & !reg_error;
  assign imtu_abort_abort_2_wd = reg_wdata[2];

  assign imtu_abort_abort_3_we = addr_hit[8] & reg_we & !reg_error;
  assign imtu_abort_abort_3_wd = reg_wdata[3];

  assign imtu_abort_abort_4_we = addr_hit[8] & reg_we & !reg_error;
  assign imtu_abort_abort_4_wd = reg_wdata[4];

  assign imtu_abort_abort_5_we = addr_hit[8] & reg_we & !reg_error;
  assign imtu_abort_abort_5_wd = reg_wdata[5];

  assign imtu_abort_abort_6_we = addr_hit[8] & reg_we & !reg_error;
  assign imtu_abort_abort_6_wd = reg_wdata[6];

  assign imtu_abort_abort_7_we = addr_hit[8] & reg_we & !reg_error;
  assign imtu_abort_abort_7_wd = reg_wdata[7];

  assign start_addr_sub_low_0_we = addr_hit[9] & reg_we & !reg_error;
  assign start_addr_sub_low_0_wd = reg_wdata[31:0];

  assign start_addr_sub_low_1_we = addr_hit[10] & reg_we & !reg_error;
  assign start_addr_sub_low_1_wd = reg_wdata[31:0];

  assign start_addr_sub_low_2_we = addr_hit[11] & reg_we & !reg_error;
  assign start_addr_sub_low_2_wd = reg_wdata[31:0];

  assign start_addr_sub_low_3_we = addr_hit[12] & reg_we & !reg_error;
  assign start_addr_sub_low_3_wd = reg_wdata[31:0];

  assign start_addr_sub_low_4_we = addr_hit[13] & reg_we & !reg_error;
  assign start_addr_sub_low_4_wd = reg_wdata[31:0];

  assign start_addr_sub_low_5_we = addr_hit[14] & reg_we & !reg_error;
  assign start_addr_sub_low_5_wd = reg_wdata[31:0];

  assign start_addr_sub_low_6_we = addr_hit[15] & reg_we & !reg_error;
  assign start_addr_sub_low_6_wd = reg_wdata[31:0];

  assign start_addr_sub_low_7_we = addr_hit[16] & reg_we & !reg_error;
  assign start_addr_sub_low_7_wd = reg_wdata[31:0];

  assign start_addr_sub_low_8_we = addr_hit[17] & reg_we & !reg_error;
  assign start_addr_sub_low_8_wd = reg_wdata[31:0];

  assign start_addr_sub_low_9_we = addr_hit[18] & reg_we & !reg_error;
  assign start_addr_sub_low_9_wd = reg_wdata[31:0];

  assign start_addr_sub_low_10_we = addr_hit[19] & reg_we & !reg_error;
  assign start_addr_sub_low_10_wd = reg_wdata[31:0];

  assign start_addr_sub_low_11_we = addr_hit[20] & reg_we & !reg_error;
  assign start_addr_sub_low_11_wd = reg_wdata[31:0];

  assign start_addr_sub_low_12_we = addr_hit[21] & reg_we & !reg_error;
  assign start_addr_sub_low_12_wd = reg_wdata[31:0];

  assign start_addr_sub_low_13_we = addr_hit[22] & reg_we & !reg_error;
  assign start_addr_sub_low_13_wd = reg_wdata[31:0];

  assign start_addr_sub_low_14_we = addr_hit[23] & reg_we & !reg_error;
  assign start_addr_sub_low_14_wd = reg_wdata[31:0];

  assign start_addr_sub_low_15_we = addr_hit[24] & reg_we & !reg_error;
  assign start_addr_sub_low_15_wd = reg_wdata[31:0];

  assign start_addr_sub_high_0_we = addr_hit[25] & reg_we & !reg_error;
  assign start_addr_sub_high_0_wd = reg_wdata[31:0];

  assign start_addr_sub_high_1_we = addr_hit[26] & reg_we & !reg_error;
  assign start_addr_sub_high_1_wd = reg_wdata[31:0];

  assign start_addr_sub_high_2_we = addr_hit[27] & reg_we & !reg_error;
  assign start_addr_sub_high_2_wd = reg_wdata[31:0];

  assign start_addr_sub_high_3_we = addr_hit[28] & reg_we & !reg_error;
  assign start_addr_sub_high_3_wd = reg_wdata[31:0];

  assign start_addr_sub_high_4_we = addr_hit[29] & reg_we & !reg_error;
  assign start_addr_sub_high_4_wd = reg_wdata[31:0];

  assign start_addr_sub_high_5_we = addr_hit[30] & reg_we & !reg_error;
  assign start_addr_sub_high_5_wd = reg_wdata[31:0];

  assign start_addr_sub_high_6_we = addr_hit[31] & reg_we & !reg_error;
  assign start_addr_sub_high_6_wd = reg_wdata[31:0];

  assign start_addr_sub_high_7_we = addr_hit[32] & reg_we & !reg_error;
  assign start_addr_sub_high_7_wd = reg_wdata[31:0];

  assign start_addr_sub_high_8_we = addr_hit[33] & reg_we & !reg_error;
  assign start_addr_sub_high_8_wd = reg_wdata[31:0];

  assign start_addr_sub_high_9_we = addr_hit[34] & reg_we & !reg_error;
  assign start_addr_sub_high_9_wd = reg_wdata[31:0];

  assign start_addr_sub_high_10_we = addr_hit[35] & reg_we & !reg_error;
  assign start_addr_sub_high_10_wd = reg_wdata[31:0];

  assign start_addr_sub_high_11_we = addr_hit[36] & reg_we & !reg_error;
  assign start_addr_sub_high_11_wd = reg_wdata[31:0];

  assign start_addr_sub_high_12_we = addr_hit[37] & reg_we & !reg_error;
  assign start_addr_sub_high_12_wd = reg_wdata[31:0];

  assign start_addr_sub_high_13_we = addr_hit[38] & reg_we & !reg_error;
  assign start_addr_sub_high_13_wd = reg_wdata[31:0];

  assign start_addr_sub_high_14_we = addr_hit[39] & reg_we & !reg_error;
  assign start_addr_sub_high_14_wd = reg_wdata[31:0];

  assign start_addr_sub_high_15_we = addr_hit[40] & reg_we & !reg_error;
  assign start_addr_sub_high_15_wd = reg_wdata[31:0];

  assign end_addr_sub_low_0_we = addr_hit[41] & reg_we & !reg_error;
  assign end_addr_sub_low_0_wd = reg_wdata[31:0];

  assign end_addr_sub_low_1_we = addr_hit[42] & reg_we & !reg_error;
  assign end_addr_sub_low_1_wd = reg_wdata[31:0];

  assign end_addr_sub_low_2_we = addr_hit[43] & reg_we & !reg_error;
  assign end_addr_sub_low_2_wd = reg_wdata[31:0];

  assign end_addr_sub_low_3_we = addr_hit[44] & reg_we & !reg_error;
  assign end_addr_sub_low_3_wd = reg_wdata[31:0];

  assign end_addr_sub_low_4_we = addr_hit[45] & reg_we & !reg_error;
  assign end_addr_sub_low_4_wd = reg_wdata[31:0];

  assign end_addr_sub_low_5_we = addr_hit[46] & reg_we & !reg_error;
  assign end_addr_sub_low_5_wd = reg_wdata[31:0];

  assign end_addr_sub_low_6_we = addr_hit[47] & reg_we & !reg_error;
  assign end_addr_sub_low_6_wd = reg_wdata[31:0];

  assign end_addr_sub_low_7_we = addr_hit[48] & reg_we & !reg_error;
  assign end_addr_sub_low_7_wd = reg_wdata[31:0];

  assign end_addr_sub_low_8_we = addr_hit[49] & reg_we & !reg_error;
  assign end_addr_sub_low_8_wd = reg_wdata[31:0];

  assign end_addr_sub_low_9_we = addr_hit[50] & reg_we & !reg_error;
  assign end_addr_sub_low_9_wd = reg_wdata[31:0];

  assign end_addr_sub_low_10_we = addr_hit[51] & reg_we & !reg_error;
  assign end_addr_sub_low_10_wd = reg_wdata[31:0];

  assign end_addr_sub_low_11_we = addr_hit[52] & reg_we & !reg_error;
  assign end_addr_sub_low_11_wd = reg_wdata[31:0];

  assign end_addr_sub_low_12_we = addr_hit[53] & reg_we & !reg_error;
  assign end_addr_sub_low_12_wd = reg_wdata[31:0];

  assign end_addr_sub_low_13_we = addr_hit[54] & reg_we & !reg_error;
  assign end_addr_sub_low_13_wd = reg_wdata[31:0];

  assign end_addr_sub_low_14_we = addr_hit[55] & reg_we & !reg_error;
  assign end_addr_sub_low_14_wd = reg_wdata[31:0];

  assign end_addr_sub_low_15_we = addr_hit[56] & reg_we & !reg_error;
  assign end_addr_sub_low_15_wd = reg_wdata[31:0];

  assign end_addr_sub_high_0_we = addr_hit[57] & reg_we & !reg_error;
  assign end_addr_sub_high_0_wd = reg_wdata[31:0];

  assign end_addr_sub_high_1_we = addr_hit[58] & reg_we & !reg_error;
  assign end_addr_sub_high_1_wd = reg_wdata[31:0];

  assign end_addr_sub_high_2_we = addr_hit[59] & reg_we & !reg_error;
  assign end_addr_sub_high_2_wd = reg_wdata[31:0];

  assign end_addr_sub_high_3_we = addr_hit[60] & reg_we & !reg_error;
  assign end_addr_sub_high_3_wd = reg_wdata[31:0];

  assign end_addr_sub_high_4_we = addr_hit[61] & reg_we & !reg_error;
  assign end_addr_sub_high_4_wd = reg_wdata[31:0];

  assign end_addr_sub_high_5_we = addr_hit[62] & reg_we & !reg_error;
  assign end_addr_sub_high_5_wd = reg_wdata[31:0];

  assign end_addr_sub_high_6_we = addr_hit[63] & reg_we & !reg_error;
  assign end_addr_sub_high_6_wd = reg_wdata[31:0];

  assign end_addr_sub_high_7_we = addr_hit[64] & reg_we & !reg_error;
  assign end_addr_sub_high_7_wd = reg_wdata[31:0];

  assign end_addr_sub_high_8_we = addr_hit[65] & reg_we & !reg_error;
  assign end_addr_sub_high_8_wd = reg_wdata[31:0];

  assign end_addr_sub_high_9_we = addr_hit[66] & reg_we & !reg_error;
  assign end_addr_sub_high_9_wd = reg_wdata[31:0];

  assign end_addr_sub_high_10_we = addr_hit[67] & reg_we & !reg_error;
  assign end_addr_sub_high_10_wd = reg_wdata[31:0];

  assign end_addr_sub_high_11_we = addr_hit[68] & reg_we & !reg_error;
  assign end_addr_sub_high_11_wd = reg_wdata[31:0];

  assign end_addr_sub_high_12_we = addr_hit[69] & reg_we & !reg_error;
  assign end_addr_sub_high_12_wd = reg_wdata[31:0];

  assign end_addr_sub_high_13_we = addr_hit[70] & reg_we & !reg_error;
  assign end_addr_sub_high_13_wd = reg_wdata[31:0];

  assign end_addr_sub_high_14_we = addr_hit[71] & reg_we & !reg_error;
  assign end_addr_sub_high_14_wd = reg_wdata[31:0];

  assign end_addr_sub_high_15_we = addr_hit[72] & reg_we & !reg_error;
  assign end_addr_sub_high_15_wd = reg_wdata[31:0];

  assign write_budget_0_we = addr_hit[73] & reg_we & !reg_error;
  assign write_budget_0_wd = reg_wdata[31:0];

  assign write_budget_1_we = addr_hit[74] & reg_we & !reg_error;
  assign write_budget_1_wd = reg_wdata[31:0];

  assign write_budget_2_we = addr_hit[75] & reg_we & !reg_error;
  assign write_budget_2_wd = reg_wdata[31:0];

  assign write_budget_3_we = addr_hit[76] & reg_we & !reg_error;
  assign write_budget_3_wd = reg_wdata[31:0];

  assign write_budget_4_we = addr_hit[77] & reg_we & !reg_error;
  assign write_budget_4_wd = reg_wdata[31:0];

  assign write_budget_5_we = addr_hit[78] & reg_we & !reg_error;
  assign write_budget_5_wd = reg_wdata[31:0];

  assign write_budget_6_we = addr_hit[79] & reg_we & !reg_error;
  assign write_budget_6_wd = reg_wdata[31:0];

  assign write_budget_7_we = addr_hit[80] & reg_we & !reg_error;
  assign write_budget_7_wd = reg_wdata[31:0];

  assign write_budget_8_we = addr_hit[81] & reg_we & !reg_error;
  assign write_budget_8_wd = reg_wdata[31:0];

  assign write_budget_9_we = addr_hit[82] & reg_we & !reg_error;
  assign write_budget_9_wd = reg_wdata[31:0];

  assign write_budget_10_we = addr_hit[83] & reg_we & !reg_error;
  assign write_budget_10_wd = reg_wdata[31:0];

  assign write_budget_11_we = addr_hit[84] & reg_we & !reg_error;
  assign write_budget_11_wd = reg_wdata[31:0];

  assign write_budget_12_we = addr_hit[85] & reg_we & !reg_error;
  assign write_budget_12_wd = reg_wdata[31:0];

  assign write_budget_13_we = addr_hit[86] & reg_we & !reg_error;
  assign write_budget_13_wd = reg_wdata[31:0];

  assign write_budget_14_we = addr_hit[87] & reg_we & !reg_error;
  assign write_budget_14_wd = reg_wdata[31:0];

  assign write_budget_15_we = addr_hit[88] & reg_we & !reg_error;
  assign write_budget_15_wd = reg_wdata[31:0];

  assign read_budget_0_we = addr_hit[89] & reg_we & !reg_error;
  assign read_budget_0_wd = reg_wdata[31:0];

  assign read_budget_1_we = addr_hit[90] & reg_we & !reg_error;
  assign read_budget_1_wd = reg_wdata[31:0];

  assign read_budget_2_we = addr_hit[91] & reg_we & !reg_error;
  assign read_budget_2_wd = reg_wdata[31:0];

  assign read_budget_3_we = addr_hit[92] & reg_we & !reg_error;
  assign read_budget_3_wd = reg_wdata[31:0];

  assign read_budget_4_we = addr_hit[93] & reg_we & !reg_error;
  assign read_budget_4_wd = reg_wdata[31:0];

  assign read_budget_5_we = addr_hit[94] & reg_we & !reg_error;
  assign read_budget_5_wd = reg_wdata[31:0];

  assign read_budget_6_we = addr_hit[95] & reg_we & !reg_error;
  assign read_budget_6_wd = reg_wdata[31:0];

  assign read_budget_7_we = addr_hit[96] & reg_we & !reg_error;
  assign read_budget_7_wd = reg_wdata[31:0];

  assign read_budget_8_we = addr_hit[97] & reg_we & !reg_error;
  assign read_budget_8_wd = reg_wdata[31:0];

  assign read_budget_9_we = addr_hit[98] & reg_we & !reg_error;
  assign read_budget_9_wd = reg_wdata[31:0];

  assign read_budget_10_we = addr_hit[99] & reg_we & !reg_error;
  assign read_budget_10_wd = reg_wdata[31:0];

  assign read_budget_11_we = addr_hit[100] & reg_we & !reg_error;
  assign read_budget_11_wd = reg_wdata[31:0];

  assign read_budget_12_we = addr_hit[101] & reg_we & !reg_error;
  assign read_budget_12_wd = reg_wdata[31:0];

  assign read_budget_13_we = addr_hit[102] & reg_we & !reg_error;
  assign read_budget_13_wd = reg_wdata[31:0];

  assign read_budget_14_we = addr_hit[103] & reg_we & !reg_error;
  assign read_budget_14_wd = reg_wdata[31:0];

  assign read_budget_15_we = addr_hit[104] & reg_we & !reg_error;
  assign read_budget_15_wd = reg_wdata[31:0];

  assign write_period_0_we = addr_hit[105] & reg_we & !reg_error;
  assign write_period_0_wd = reg_wdata[31:0];

  assign write_period_1_we = addr_hit[106] & reg_we & !reg_error;
  assign write_period_1_wd = reg_wdata[31:0];

  assign write_period_2_we = addr_hit[107] & reg_we & !reg_error;
  assign write_period_2_wd = reg_wdata[31:0];

  assign write_period_3_we = addr_hit[108] & reg_we & !reg_error;
  assign write_period_3_wd = reg_wdata[31:0];

  assign write_period_4_we = addr_hit[109] & reg_we & !reg_error;
  assign write_period_4_wd = reg_wdata[31:0];

  assign write_period_5_we = addr_hit[110] & reg_we & !reg_error;
  assign write_period_5_wd = reg_wdata[31:0];

  assign write_period_6_we = addr_hit[111] & reg_we & !reg_error;
  assign write_period_6_wd = reg_wdata[31:0];

  assign write_period_7_we = addr_hit[112] & reg_we & !reg_error;
  assign write_period_7_wd = reg_wdata[31:0];

  assign write_period_8_we = addr_hit[113] & reg_we & !reg_error;
  assign write_period_8_wd = reg_wdata[31:0];

  assign write_period_9_we = addr_hit[114] & reg_we & !reg_error;
  assign write_period_9_wd = reg_wdata[31:0];

  assign write_period_10_we = addr_hit[115] & reg_we & !reg_error;
  assign write_period_10_wd = reg_wdata[31:0];

  assign write_period_11_we = addr_hit[116] & reg_we & !reg_error;
  assign write_period_11_wd = reg_wdata[31:0];

  assign write_period_12_we = addr_hit[117] & reg_we & !reg_error;
  assign write_period_12_wd = reg_wdata[31:0];

  assign write_period_13_we = addr_hit[118] & reg_we & !reg_error;
  assign write_period_13_wd = reg_wdata[31:0];

  assign write_period_14_we = addr_hit[119] & reg_we & !reg_error;
  assign write_period_14_wd = reg_wdata[31:0];

  assign write_period_15_we = addr_hit[120] & reg_we & !reg_error;
  assign write_period_15_wd = reg_wdata[31:0];

  assign read_period_0_we = addr_hit[121] & reg_we & !reg_error;
  assign read_period_0_wd = reg_wdata[31:0];

  assign read_period_1_we = addr_hit[122] & reg_we & !reg_error;
  assign read_period_1_wd = reg_wdata[31:0];

  assign read_period_2_we = addr_hit[123] & reg_we & !reg_error;
  assign read_period_2_wd = reg_wdata[31:0];

  assign read_period_3_we = addr_hit[124] & reg_we & !reg_error;
  assign read_period_3_wd = reg_wdata[31:0];

  assign read_period_4_we = addr_hit[125] & reg_we & !reg_error;
  assign read_period_4_wd = reg_wdata[31:0];

  assign read_period_5_we = addr_hit[126] & reg_we & !reg_error;
  assign read_period_5_wd = reg_wdata[31:0];

  assign read_period_6_we = addr_hit[127] & reg_we & !reg_error;
  assign read_period_6_wd = reg_wdata[31:0];

  assign read_period_7_we = addr_hit[128] & reg_we & !reg_error;
  assign read_period_7_wd = reg_wdata[31:0];

  assign read_period_8_we = addr_hit[129] & reg_we & !reg_error;
  assign read_period_8_wd = reg_wdata[31:0];

  assign read_period_9_we = addr_hit[130] & reg_we & !reg_error;
  assign read_period_9_wd = reg_wdata[31:0];

  assign read_period_10_we = addr_hit[131] & reg_we & !reg_error;
  assign read_period_10_wd = reg_wdata[31:0];

  assign read_period_11_we = addr_hit[132] & reg_we & !reg_error;
  assign read_period_11_wd = reg_wdata[31:0];

  assign read_period_12_we = addr_hit[133] & reg_we & !reg_error;
  assign read_period_12_wd = reg_wdata[31:0];

  assign read_period_13_we = addr_hit[134] & reg_we & !reg_error;
  assign read_period_13_wd = reg_wdata[31:0];

  assign read_period_14_we = addr_hit[135] & reg_we & !reg_error;
  assign read_period_14_wd = reg_wdata[31:0];

  assign read_period_15_we = addr_hit[136] & reg_we & !reg_error;
  assign read_period_15_wd = reg_wdata[31:0];

  assign write_budget_left_0_re = addr_hit[137] & reg_re & !reg_error;

  assign write_budget_left_1_re = addr_hit[138] & reg_re & !reg_error;

  assign write_budget_left_2_re = addr_hit[139] & reg_re & !reg_error;

  assign write_budget_left_3_re = addr_hit[140] & reg_re & !reg_error;

  assign write_budget_left_4_re = addr_hit[141] & reg_re & !reg_error;

  assign write_budget_left_5_re = addr_hit[142] & reg_re & !reg_error;

  assign write_budget_left_6_re = addr_hit[143] & reg_re & !reg_error;

  assign write_budget_left_7_re = addr_hit[144] & reg_re & !reg_error;

  assign write_budget_left_8_re = addr_hit[145] & reg_re & !reg_error;

  assign write_budget_left_9_re = addr_hit[146] & reg_re & !reg_error;

  assign write_budget_left_10_re = addr_hit[147] & reg_re & !reg_error;

  assign write_budget_left_11_re = addr_hit[148] & reg_re & !reg_error;

  assign write_budget_left_12_re = addr_hit[149] & reg_re & !reg_error;

  assign write_budget_left_13_re = addr_hit[150] & reg_re & !reg_error;

  assign write_budget_left_14_re = addr_hit[151] & reg_re & !reg_error;

  assign write_budget_left_15_re = addr_hit[152] & reg_re & !reg_error;

  assign read_budget_left_0_re = addr_hit[153] & reg_re & !reg_error;

  assign read_budget_left_1_re = addr_hit[154] & reg_re & !reg_error;

  assign read_budget_left_2_re = addr_hit[155] & reg_re & !reg_error;

  assign read_budget_left_3_re = addr_hit[156] & reg_re & !reg_error;

  assign read_budget_left_4_re = addr_hit[157] & reg_re & !reg_error;

  assign read_budget_left_5_re = addr_hit[158] & reg_re & !reg_error;

  assign read_budget_left_6_re = addr_hit[159] & reg_re & !reg_error;

  assign read_budget_left_7_re = addr_hit[160] & reg_re & !reg_error;

  assign read_budget_left_8_re = addr_hit[161] & reg_re & !reg_error;

  assign read_budget_left_9_re = addr_hit[162] & reg_re & !reg_error;

  assign read_budget_left_10_re = addr_hit[163] & reg_re & !reg_error;

  assign read_budget_left_11_re = addr_hit[164] & reg_re & !reg_error;

  assign read_budget_left_12_re = addr_hit[165] & reg_re & !reg_error;

  assign read_budget_left_13_re = addr_hit[166] & reg_re & !reg_error;

  assign read_budget_left_14_re = addr_hit[167] & reg_re & !reg_error;

  assign read_budget_left_15_re = addr_hit[168] & reg_re & !reg_error;

  assign write_period_left_0_re = addr_hit[169] & reg_re & !reg_error;

  assign write_period_left_1_re = addr_hit[170] & reg_re & !reg_error;

  assign write_period_left_2_re = addr_hit[171] & reg_re & !reg_error;

  assign write_period_left_3_re = addr_hit[172] & reg_re & !reg_error;

  assign write_period_left_4_re = addr_hit[173] & reg_re & !reg_error;

  assign write_period_left_5_re = addr_hit[174] & reg_re & !reg_error;

  assign write_period_left_6_re = addr_hit[175] & reg_re & !reg_error;

  assign write_period_left_7_re = addr_hit[176] & reg_re & !reg_error;

  assign write_period_left_8_re = addr_hit[177] & reg_re & !reg_error;

  assign write_period_left_9_re = addr_hit[178] & reg_re & !reg_error;

  assign write_period_left_10_re = addr_hit[179] & reg_re & !reg_error;

  assign write_period_left_11_re = addr_hit[180] & reg_re & !reg_error;

  assign write_period_left_12_re = addr_hit[181] & reg_re & !reg_error;

  assign write_period_left_13_re = addr_hit[182] & reg_re & !reg_error;

  assign write_period_left_14_re = addr_hit[183] & reg_re & !reg_error;

  assign write_period_left_15_re = addr_hit[184] & reg_re & !reg_error;

  assign read_period_left_0_re = addr_hit[185] & reg_re & !reg_error;

  assign read_period_left_1_re = addr_hit[186] & reg_re & !reg_error;

  assign read_period_left_2_re = addr_hit[187] & reg_re & !reg_error;

  assign read_period_left_3_re = addr_hit[188] & reg_re & !reg_error;

  assign read_period_left_4_re = addr_hit[189] & reg_re & !reg_error;

  assign read_period_left_5_re = addr_hit[190] & reg_re & !reg_error;

  assign read_period_left_6_re = addr_hit[191] & reg_re & !reg_error;

  assign read_period_left_7_re = addr_hit[192] & reg_re & !reg_error;

  assign read_period_left_8_re = addr_hit[193] & reg_re & !reg_error;

  assign read_period_left_9_re = addr_hit[194] & reg_re & !reg_error;

  assign read_period_left_10_re = addr_hit[195] & reg_re & !reg_error;

  assign read_period_left_11_re = addr_hit[196] & reg_re & !reg_error;

  assign read_period_left_12_re = addr_hit[197] & reg_re & !reg_error;

  assign read_period_left_13_re = addr_hit[198] & reg_re & !reg_error;

  assign read_period_left_14_re = addr_hit[199] & reg_re & !reg_error;

  assign read_period_left_15_re = addr_hit[200] & reg_re & !reg_error;

  assign isolate_isolate_0_re = addr_hit[201] & reg_re & !reg_error;

  assign isolate_isolate_1_re = addr_hit[201] & reg_re & !reg_error;

  assign isolate_isolate_2_re = addr_hit[201] & reg_re & !reg_error;

  assign isolate_isolate_3_re = addr_hit[201] & reg_re & !reg_error;

  assign isolate_isolate_4_re = addr_hit[201] & reg_re & !reg_error;

  assign isolate_isolate_5_re = addr_hit[201] & reg_re & !reg_error;

  assign isolate_isolate_6_re = addr_hit[201] & reg_re & !reg_error;

  assign isolate_isolate_7_re = addr_hit[201] & reg_re & !reg_error;

  assign isolated_isolated_0_re = addr_hit[202] & reg_re & !reg_error;

  assign isolated_isolated_1_re = addr_hit[202] & reg_re & !reg_error;

  assign isolated_isolated_2_re = addr_hit[202] & reg_re & !reg_error;

  assign isolated_isolated_3_re = addr_hit[202] & reg_re & !reg_error;

  assign isolated_isolated_4_re = addr_hit[202] & reg_re & !reg_error;

  assign isolated_isolated_5_re = addr_hit[202] & reg_re & !reg_error;

  assign isolated_isolated_6_re = addr_hit[202] & reg_re & !reg_error;

  assign isolated_isolated_7_re = addr_hit[202] & reg_re & !reg_error;

  assign num_managers_re = addr_hit[203] & reg_re & !reg_error;

  assign addr_width_re = addr_hit[204] & reg_re & !reg_error;

  assign data_width_re = addr_hit[205] & reg_re & !reg_error;

  assign id_width_re = addr_hit[206] & reg_re & !reg_error;

  assign user_width_re = addr_hit[207] & reg_re & !reg_error;

  assign num_pending_re = addr_hit[208] & reg_re & !reg_error;

  assign w_buffer_depth_re = addr_hit[209] & reg_re & !reg_error;

  assign num_addr_regions_re = addr_hit[210] & reg_re & !reg_error;

  assign period_width_re = addr_hit[211] & reg_re & !reg_error;

  assign budget_width_re = addr_hit[212] & reg_re & !reg_error;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = major_version_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = minor_version_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = patch_version_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[6] = '0;
        reg_rdata_next[7] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = rt_bypassed_bypassed_0_qs;
        reg_rdata_next[1] = rt_bypassed_bypassed_1_qs;
        reg_rdata_next[2] = rt_bypassed_bypassed_2_qs;
        reg_rdata_next[3] = rt_bypassed_bypassed_3_qs;
        reg_rdata_next[4] = rt_bypassed_bypassed_4_qs;
        reg_rdata_next[5] = rt_bypassed_bypassed_5_qs;
        reg_rdata_next[6] = rt_bypassed_bypassed_6_qs;
        reg_rdata_next[7] = rt_bypassed_bypassed_7_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[7:0] = '0;
        reg_rdata_next[15:8] = '0;
        reg_rdata_next[23:16] = '0;
        reg_rdata_next[31:24] = '0;
      end

      addr_hit[6]: begin
        reg_rdata_next[7:0] = '0;
        reg_rdata_next[15:8] = '0;
        reg_rdata_next[23:16] = '0;
        reg_rdata_next[31:24] = '0;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[6] = '0;
        reg_rdata_next[7] = '0;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[6] = '0;
        reg_rdata_next[7] = '0;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[42]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[43]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[45]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[46]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[48]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[49]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[50]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[51]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[52]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[53]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[54]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[55]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[56]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[57]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[58]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[59]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[60]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[61]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[62]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[63]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[64]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[65]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[66]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[67]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[68]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[69]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[70]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[71]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[72]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[73]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[74]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[75]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[76]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[77]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[78]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[79]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[80]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[81]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[82]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[83]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[84]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[85]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[86]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[87]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[88]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[89]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[90]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[91]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[92]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[93]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[94]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[95]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[96]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[97]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[98]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[99]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[100]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[101]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[102]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[103]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[104]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[105]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[106]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[107]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[108]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[109]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[110]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[111]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[112]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[113]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[114]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[115]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[116]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[117]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[118]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[119]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[120]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[121]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[122]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[123]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[124]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[125]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[126]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[127]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[128]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[129]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[130]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[131]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[132]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[133]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[134]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[135]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[136]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[137]: begin
        reg_rdata_next[31:0] = write_budget_left_0_qs;
      end

      addr_hit[138]: begin
        reg_rdata_next[31:0] = write_budget_left_1_qs;
      end

      addr_hit[139]: begin
        reg_rdata_next[31:0] = write_budget_left_2_qs;
      end

      addr_hit[140]: begin
        reg_rdata_next[31:0] = write_budget_left_3_qs;
      end

      addr_hit[141]: begin
        reg_rdata_next[31:0] = write_budget_left_4_qs;
      end

      addr_hit[142]: begin
        reg_rdata_next[31:0] = write_budget_left_5_qs;
      end

      addr_hit[143]: begin
        reg_rdata_next[31:0] = write_budget_left_6_qs;
      end

      addr_hit[144]: begin
        reg_rdata_next[31:0] = write_budget_left_7_qs;
      end

      addr_hit[145]: begin
        reg_rdata_next[31:0] = write_budget_left_8_qs;
      end

      addr_hit[146]: begin
        reg_rdata_next[31:0] = write_budget_left_9_qs;
      end

      addr_hit[147]: begin
        reg_rdata_next[31:0] = write_budget_left_10_qs;
      end

      addr_hit[148]: begin
        reg_rdata_next[31:0] = write_budget_left_11_qs;
      end

      addr_hit[149]: begin
        reg_rdata_next[31:0] = write_budget_left_12_qs;
      end

      addr_hit[150]: begin
        reg_rdata_next[31:0] = write_budget_left_13_qs;
      end

      addr_hit[151]: begin
        reg_rdata_next[31:0] = write_budget_left_14_qs;
      end

      addr_hit[152]: begin
        reg_rdata_next[31:0] = write_budget_left_15_qs;
      end

      addr_hit[153]: begin
        reg_rdata_next[31:0] = read_budget_left_0_qs;
      end

      addr_hit[154]: begin
        reg_rdata_next[31:0] = read_budget_left_1_qs;
      end

      addr_hit[155]: begin
        reg_rdata_next[31:0] = read_budget_left_2_qs;
      end

      addr_hit[156]: begin
        reg_rdata_next[31:0] = read_budget_left_3_qs;
      end

      addr_hit[157]: begin
        reg_rdata_next[31:0] = read_budget_left_4_qs;
      end

      addr_hit[158]: begin
        reg_rdata_next[31:0] = read_budget_left_5_qs;
      end

      addr_hit[159]: begin
        reg_rdata_next[31:0] = read_budget_left_6_qs;
      end

      addr_hit[160]: begin
        reg_rdata_next[31:0] = read_budget_left_7_qs;
      end

      addr_hit[161]: begin
        reg_rdata_next[31:0] = read_budget_left_8_qs;
      end

      addr_hit[162]: begin
        reg_rdata_next[31:0] = read_budget_left_9_qs;
      end

      addr_hit[163]: begin
        reg_rdata_next[31:0] = read_budget_left_10_qs;
      end

      addr_hit[164]: begin
        reg_rdata_next[31:0] = read_budget_left_11_qs;
      end

      addr_hit[165]: begin
        reg_rdata_next[31:0] = read_budget_left_12_qs;
      end

      addr_hit[166]: begin
        reg_rdata_next[31:0] = read_budget_left_13_qs;
      end

      addr_hit[167]: begin
        reg_rdata_next[31:0] = read_budget_left_14_qs;
      end

      addr_hit[168]: begin
        reg_rdata_next[31:0] = read_budget_left_15_qs;
      end

      addr_hit[169]: begin
        reg_rdata_next[31:0] = write_period_left_0_qs;
      end

      addr_hit[170]: begin
        reg_rdata_next[31:0] = write_period_left_1_qs;
      end

      addr_hit[171]: begin
        reg_rdata_next[31:0] = write_period_left_2_qs;
      end

      addr_hit[172]: begin
        reg_rdata_next[31:0] = write_period_left_3_qs;
      end

      addr_hit[173]: begin
        reg_rdata_next[31:0] = write_period_left_4_qs;
      end

      addr_hit[174]: begin
        reg_rdata_next[31:0] = write_period_left_5_qs;
      end

      addr_hit[175]: begin
        reg_rdata_next[31:0] = write_period_left_6_qs;
      end

      addr_hit[176]: begin
        reg_rdata_next[31:0] = write_period_left_7_qs;
      end

      addr_hit[177]: begin
        reg_rdata_next[31:0] = write_period_left_8_qs;
      end

      addr_hit[178]: begin
        reg_rdata_next[31:0] = write_period_left_9_qs;
      end

      addr_hit[179]: begin
        reg_rdata_next[31:0] = write_period_left_10_qs;
      end

      addr_hit[180]: begin
        reg_rdata_next[31:0] = write_period_left_11_qs;
      end

      addr_hit[181]: begin
        reg_rdata_next[31:0] = write_period_left_12_qs;
      end

      addr_hit[182]: begin
        reg_rdata_next[31:0] = write_period_left_13_qs;
      end

      addr_hit[183]: begin
        reg_rdata_next[31:0] = write_period_left_14_qs;
      end

      addr_hit[184]: begin
        reg_rdata_next[31:0] = write_period_left_15_qs;
      end

      addr_hit[185]: begin
        reg_rdata_next[31:0] = read_period_left_0_qs;
      end

      addr_hit[186]: begin
        reg_rdata_next[31:0] = read_period_left_1_qs;
      end

      addr_hit[187]: begin
        reg_rdata_next[31:0] = read_period_left_2_qs;
      end

      addr_hit[188]: begin
        reg_rdata_next[31:0] = read_period_left_3_qs;
      end

      addr_hit[189]: begin
        reg_rdata_next[31:0] = read_period_left_4_qs;
      end

      addr_hit[190]: begin
        reg_rdata_next[31:0] = read_period_left_5_qs;
      end

      addr_hit[191]: begin
        reg_rdata_next[31:0] = read_period_left_6_qs;
      end

      addr_hit[192]: begin
        reg_rdata_next[31:0] = read_period_left_7_qs;
      end

      addr_hit[193]: begin
        reg_rdata_next[31:0] = read_period_left_8_qs;
      end

      addr_hit[194]: begin
        reg_rdata_next[31:0] = read_period_left_9_qs;
      end

      addr_hit[195]: begin
        reg_rdata_next[31:0] = read_period_left_10_qs;
      end

      addr_hit[196]: begin
        reg_rdata_next[31:0] = read_period_left_11_qs;
      end

      addr_hit[197]: begin
        reg_rdata_next[31:0] = read_period_left_12_qs;
      end

      addr_hit[198]: begin
        reg_rdata_next[31:0] = read_period_left_13_qs;
      end

      addr_hit[199]: begin
        reg_rdata_next[31:0] = read_period_left_14_qs;
      end

      addr_hit[200]: begin
        reg_rdata_next[31:0] = read_period_left_15_qs;
      end

      addr_hit[201]: begin
        reg_rdata_next[0] = isolate_isolate_0_qs;
        reg_rdata_next[1] = isolate_isolate_1_qs;
        reg_rdata_next[2] = isolate_isolate_2_qs;
        reg_rdata_next[3] = isolate_isolate_3_qs;
        reg_rdata_next[4] = isolate_isolate_4_qs;
        reg_rdata_next[5] = isolate_isolate_5_qs;
        reg_rdata_next[6] = isolate_isolate_6_qs;
        reg_rdata_next[7] = isolate_isolate_7_qs;
      end

      addr_hit[202]: begin
        reg_rdata_next[0] = isolated_isolated_0_qs;
        reg_rdata_next[1] = isolated_isolated_1_qs;
        reg_rdata_next[2] = isolated_isolated_2_qs;
        reg_rdata_next[3] = isolated_isolated_3_qs;
        reg_rdata_next[4] = isolated_isolated_4_qs;
        reg_rdata_next[5] = isolated_isolated_5_qs;
        reg_rdata_next[6] = isolated_isolated_6_qs;
        reg_rdata_next[7] = isolated_isolated_7_qs;
      end

      addr_hit[203]: begin
        reg_rdata_next[31:0] = num_managers_qs;
      end

      addr_hit[204]: begin
        reg_rdata_next[31:0] = addr_width_qs;
      end

      addr_hit[205]: begin
        reg_rdata_next[31:0] = data_width_qs;
      end

      addr_hit[206]: begin
        reg_rdata_next[31:0] = id_width_qs;
      end

      addr_hit[207]: begin
        reg_rdata_next[31:0] = user_width_qs;
      end

      addr_hit[208]: begin
        reg_rdata_next[31:0] = num_pending_qs;
      end

      addr_hit[209]: begin
        reg_rdata_next[31:0] = w_buffer_depth_qs;
      end

      addr_hit[210]: begin
        reg_rdata_next[31:0] = num_addr_regions_qs;
      end

      addr_hit[211]: begin
        reg_rdata_next[31:0] = period_width_qs;
      end

      addr_hit[212]: begin
        reg_rdata_next[31:0] = budget_width_qs;
      end

      addr_hit[213]: begin
        reg_rdata_next[31:0] = max_num_managers_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module axi_rt_reg_top_intf
#(
  parameter int AW = 10,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output axi_rt_reg_pkg::axi_rt_reg2hw_t reg2hw, // Write
  input  axi_rt_reg_pkg::axi_rt_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  axi_rt_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


